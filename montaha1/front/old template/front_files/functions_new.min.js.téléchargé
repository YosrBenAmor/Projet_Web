;(function($, window, document, undefined) {
	var $win = $(window);
	var $doc = $(document);
	
	let scrollpos = window.scrollY
	const header = document.querySelector("nav")
	const header_height = header.offsetHeight

	const add_class_on_scroll = () => header.classList.add("active")
	const remove_class_on_scroll = () => header.classList.remove("active")

	window.addEventListener('scroll', function() { 
	  scrollpos = window.scrollY;

	  if (scrollpos >= header_height) { add_class_on_scroll() }
	  else { remove_class_on_scroll() }
	})
	
	var onCreate = function ($currentSlide, effect) {
			var $img = $currentSlide.find('img[data-url]');
			if ($img.length) {
				$img.hide().after(['<iframe width="100%" height="100%" src="', $img.data("url"), '" frameborder="0" allowfullscreen></iframe>'].join(''));
			}
		},
		onAfter = function (obj) {
			var $img = obj.items.visible.find('img[data-url]');
			if ($img.length) {
				$img.hide();
				var $iframe = obj.items.visible.find('iframe');
				if ($iframe.length) {
					$iframe.show();
				} else {
					$img.after(['<iframe width="100%" height="100%" src="', $img.data("url"), '" frameborder="0" allowfullscreen></iframe>'].join(''));
				}
			}
		};
		
	$.ajaxSetup({
		error: function (jqXHR, textStatus, errorThrown) {
			if (jqXHR.status === 401) {
				window.location.href = jqXHR.getResponseHeader('X-PJ-Login');
			}
		}
	});
	
	$doc.ready(function() {
		
		var validate = ($.fn.validate !== undefined),
			colorbox = ($.fn.colorbox !== undefined),
			zinoUpload = ($.fn.zinoUpload !== undefined),
			fullscreener = ($.fn.fullscreener !== undefined),
			pjInfiniteScroll = ($.fn.pjInfiniteScroll !== undefined);
			
		function fixScrollTop() {
			var $pageTopSticked = $(".pageTopSticked");
			if ($pageTopSticked.length) {
				var diff = $win.scrollTop() - $pageTopSticked.outerHeight();
				if (diff > 0) {
					$win.scrollTop(diff);
				}
			}
		}
		
		$win.on("hashchange", function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			trackHashLinks.call(null, window.location.hash);
			openQuestion.call(null);
			var $el = $(window.location.hash);
			if ($el.length) {
				var $wayPoint = $el.offset().top - ($('.pageTop').outerHeight());
				$('html, body').animate({
					scrollTop: $wayPoint
				}, 1000);
			}
			return false;
		});
			
		$doc.on("click", ".selector-facebook-share", function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			trackEvent.call(null, 'Share_FB', 'click', {'page': window.location.pathname});
			var pos = getPosition();
			window.open('https://www.facebook.com/sharer/sharer.php?u='+encodeURIComponent(getPreferedUrl()), 
				'facebook-share-dialog', 
				'left='+pos.left+',top='+pos.top+',width='+pos.width+',height='+pos.height+',personalbar=0,toolbar=0,scrollbars=1,resizable=1');
			var $this = $(this);
			trackShare.call(null, $this.data('id'), $this.data('model'), 'fb_cnt');
		}).on("click", ".selector-twitter-share", function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			trackEvent.call(null, 'Share_TW', 'click', {'page': window.location.pathname});
			var pos = getPosition();
			window.open('https://twitter.com/intent/tweet?source=webclient&text=&url='+encodeURIComponent(getPreferedUrl()),
				'twitter-share-dialog',
				'left='+pos.left+',top='+pos.top+',width='+pos.width+',height='+pos.height+',personalbar=0,toolbar=0,scrollbars=1,resizable=1');
			var $this = $(this);
			trackShare.call(null, $this.data('id'), $this.data('model'), 'tw_cnt');
		}).on("click", ".selector-linkedin-share", function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			trackEvent.call(null, 'Share_LI', 'click', {'page': window.location.pathname});
			var pos = getPosition(),
				url = encodeURIComponent(getPreferedUrl());
			window.open('http://www.linkedin.com/shareArticle?mini=true&url='+url+'&title=',
				'linkedin-share-dialog',
				'left='+pos.left+',top='+pos.top+',width='+pos.width+',height='+pos.height+',personalbar=0,toolbar=0,scrollbars=1,resizable=1');
			var $this = $(this);
			trackShare.call(null, $this.data('id'), $this.data('model'), 'li_cnt');
		}).on("click", ".selector-google-share", function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			trackEvent.call(null, 'Share_G+', 'click', {'page': window.location.pathname});
			var pos = getPosition();
			window.open('https://plusone.google.com/_/+1/confirm?hl=en&url='+encodeURIComponent(getPreferedUrl()),
				'google-share-dialog',
				'left='+pos.left+',top='+pos.top+',width='+pos.width+',height='+pos.height+',personalbar=0,toolbar=0,scrollbars=1,resizable=1');
			var $this = $(this);
			trackShare.call(null, $this.data('id'), $this.data('model'), 'gp_cnt');
		}).on("click", ".selectorVote", function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			var $this = $(this);
			$.post("vote/", {
				"foreign_id": $this.data("id"),
				"model": $this.data("model"),
				"direction": $this.data("direction")
			}).done(function (data) {
				if (data.status && data.status === 'OK' && data.total) {
					switch ($this.data("direction")) {
					case 'up':
						$this.find(".likesCounter").text(data.total);
						break;
					case 'down':
						$this.find(".dislikesCounter").text(data.total);
						break;
					}
				}
			});
			return false;
		}).on("click", ".selectorCaptcha", function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			var $img = $(this);
			$img.attr("src", $img.attr("src").replace(/(rand=)(\d+)/, '$1' + Math.floor(Math.random() * 9999)));
			return false;
		}).on("change", "#selector-template-category", function (e) {
			var url,
				category = $(this).find("option:selected").val();
			if (category != "") {
				url = ['free-', category, '-website-templates.php'].join('');
			} else {
				url = 'free-website-templates.php';
			}
			window.location.href = url;
		}).on("change", 'form.remotely-form select[name="product_id"]', function (e) {
			getRemotelyPrices.call(null, $(this).find("option:selected").val());
		}).on("click", ".bannerContainer a", function (e) {
			// Track banner interactions
			var $this = $(this),
				$bContainer = $this.closest(".bannerContainer"),
				category = ['Banner', $bContainer.data("category"), $bContainer.data("id")].join('_');
			
			trackEvent.call(null, category, 'click', {'page': $this.attr("href")});
		}).on("click", ".msContainer a", function (e) {
			// Track mega sale banner interactions
			var $this = $(this),
				$bContainer = $this.closest(".msContainer"),
				category = ['MS', $bContainer.data("category"), $bContainer.data("id")].join('_');
			
			trackEvent.call(null, category, 'click', {'page': $this.attr("href")});
		}).on("click", ".msLink", function (e) {
			// Track mega sale link interactions
			var $this = $(this),
				category = ['MS', $this.data("category"), $this.data("id")].join('_');
			
			trackEvent.call(null, category, 'click', {'page': $this.attr("href")});
		}).on("click", ".msBuyNow", function (e) {
			// Track mega sale "Buy Now" link interactions
			var $this = $(this),
				category = ['MS_BuyNow_Dialog', $this.data("id")].join('_');
			
			trackEvent.call(null, category, 'open', window.location.pathname);
			
			trackFbEvent.call(null, 'AddToCart');
			
		}).on("click", ".msContact", function (e) {
			// Track mega sale "Contact Us" link interactions
			var $this = $(this),
				category = ['MS_ContactUs_Dialog', $this.data("id")].join('_');
			
			trackEvent.call(null, category, 'open', window.location.pathname);
			
		}).on("click", ".msPromoCode", function (e) {
			
			trackEvent.call(null, 'claim-promocode', 'click');
			
		}).on("change", "#suggestion_filter", function () {
			var value = $(this).find("option:selected").val();
			if (value.indexOf(':') !== -1) {
				var parts = value.split(':');
				window.location.href = ['suggestions.php?', parts[0], '=', parts[1]].join('');
			}
		}).on("click", ".btnDownloadAndSubscribe", function (e) {
			if ($('input[name="tac"]').is(":checked")) {
				$("#tac_error").hide();
				$( $(this).data("trigger") ).trigger("click");	
			} else {
				if (e && e.preventDefault) {
					e.preventDefault();
				}
				$("#tac_error").show();
				return false;
			}
		}).on("click", ".product_kbase", function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			var url = $("#product_kbase option").filter(":selected").val();
			if (url) {
				window.location.href = url;
			}
			return false;
		}).on("click", ".videoTestimonial", function (e) {
			var $this = $(this);
			trackEvent.call(null, 'Testimonial_Video_' + $this.data("id"), 'play', {'page': $this.attr("href")});
		}).on("click", "#testimonialVideo .sliderControls a, .sliderVideoTestimonials .sliderControls a", function (e) {
			trackEvent.call(null, 'Testimonial_Video_Nav', 'click', $(this).attr("href"));
		}).on("click", "#testimonialText .sliderControls a", function (e) {
			trackEvent.call(null, 'Testimonial_Text_Nav', 'click', $(this).attr("href"));
		}).on("click", ".orderFeaturedNav", function (e) {
			trackEvent.call(null, 'PrevNext_Order_Featured', 'click', $(this).attr("href"));
		}).on("click", ".orderRelatedNav", function (e) {
			trackEvent.call(null, 'PrevNext_Order_Related', 'click', $(this).attr("href"));
		}).on("click", ".orderRelatedGoTo", function (e) {
			trackEvent.call(null, 'ScrollTo_Order_Related', 'click', $(this).attr("href"));
		}).on("change", "#clients_category", function () {
			$(this).closest('form').submit();
		}).on("change", "#support_qa_product", function () {
			window.location.href = $(this).find('option:selected').val();
		}).on("click", ".btn-discount", function () {
			$.get("discounted-scripts.php").done(function (data) {
				$('#discountModal').find(".tab-discount").removeClass("active");
				$('#discountModal').find(".btn-discount").addClass("active");
				$('#discountModal').find(".tab-content").html(data);
				$('#discountModal').modal("show");
				
				var $validatorDeal1,
					$frmDeal1 = $("#frmDeal1");
				
				if ($frmDeal1.length) {
					$frmDeal1.on("click", 'input[name="license"]', function () {
						var license = $(this).val();
						var $selected = $frmDeal1.find("#product_id").find("option:selected");
						
						$frmDeal1.find("#dealRegularPrice").html(license == 'dev' ? $selected.data("dev") : $selected.data("user"));
						$frmDeal1.find("#dealYourPrice").html(license == 'dev' ? $selected.data("dev-discounted") : $selected.data("user-discounted"));
						
						$(".price-dev-user").addClass("hidden");
						$(".price-" + license).removeClass("hidden");
					}).on("click", ".btnAddScript", function () {
						
						var $selected = $(this),
							id = $selected.data("id"),
							license = $frmDeal1.find('input[name="license"]:checked').val(); 
						
						if ($frmDeal1.find('input[name="product_id[]"][value="'+ id +':'+ license +'"]').length) {
							return;
						}
						
						var $clone = $("#tblHiddenClone").find("tbody").clone(),
							html = $clone.html();
						
						html = html
							.replace(/\{URL\}/g, $selected.data("url"))
							.replace(/\{NAME\}/g, $selected.data("name"))
							.replace(/\{LOGO\}/g, ['<img src="', $selected.data("logo"), '" alt="', $selected.text(), '">'].join(''))
							.replace(/\{PRICE\}/g, license == 'dev' ? $selected.data("dev-discounted") : $selected.data("user-discounted"))
							.replace(/\{OLD_PRICE\}/g, license == 'dev' ? $selected.data("dev") : $selected.data("user"))
							.replace(/\{ID\}/g, id)
							.replace(/\{LICENSE\}/g, license)
							.replace(/\{LICENSE_NAME\}/g, license == 'dev' ? 'Developer' : 'User');
							
						$(html).insertBefore($frmDeal1.find(".tableCheckout tr:last"));
						
						watchDeal1();
						$(".btnPurchase").show();
					}).on("click", ".btnRemoveScript", function (e) {
						if (e && e.preventDefault) {
							e.preventDefault();
						}
						
						$(this).closest("tr").remove();
						watchDeal1();
						
						return false;
					}).validate({
						ignore: "",
						wrapper: 'li',
						errorLabelContainer: $frmDeal1.find('.formValidation ul'),
						errorClass: 'formError',
						onkeyup: false,
						submitHandler: function (form) {
							$frmDeal1.find("a.btnPaymentTrigger.btnPayNow").trigger("click");
							return false;
						}
					});
					
					function watchDeal1() {
						var cnt = 0,
							$a = $frmDeal1.find("a.btnPayNow").attr("href", "#"),
							$button = $frmDeal1.find(":submit").prop("disabled", true),
							$regular = $frmDeal1.find(".dealRegularPrice").html(0),
							$deal = $frmDeal1.find(".dealYourPrice").html(0);
						
						$frmDeal1.find('input[name="product_id[]"]').each(function () {
							if (/^\d+:(user|dev)$/.test($(this).val())) {
								cnt += 1;
							}
						});
						
						if (cnt === 0) {
							return;
						}
						
						$.post("payments/validate-deal/", $frmDeal1.serialize()).done(function (data) {
							if (data && data.status && data.status === "OK") {
								$a.attr("href", data.href);
								$button.prop("disabled", false);
								
								$regular.html(data.regular_price);
								$deal.html(data.deal_price);
							} else {
								$a.attr("href", "#");
							}
						}).fail(function () {
							$a.attr("href", "#");
						});
					}
				}
			});
		}).on("click", ".btn-buy-2", function () {
			$.get("buy-2-get-5.php").done(function (data) {
				$('#discountModal').find(".tab-discount").removeClass("active");
				$('#discountModal').find(".btn-buy-2").addClass("active");
				$('#discountModal').find(".tab-content").html(data);
				$('#discountModal').modal("show");
				
				var $frmDeal2 = $("#frmDeal2");
			
				if ($frmDeal2.length) {
					var $validatorDeal2 = $frmDeal2.validate({
						rules: {
							"product_id[0]": "required",
							"product_id[1]": "required",
							"free_product_id[0]": "required",
							"free_product_id[1]": "required",
							"free_product_id[2]": "required",
						},
						ignore: "",
						wrapper: 'li',
						errorLabelContainer: $frmDeal2.find('.formValidation ul'),
						errorClass: 'formError',
						onkeyup: false,
						submitHandler: function (form) {
							$frmDeal2.find("a.btnPaymentTrigger.btnPayNow").trigger("click");
							return false;
						}
					});

					$frmDeal2.on("change", "select", function () {
						
						$validatorDeal2.element(this);
						watchDeal2.call(this);
					});
					
					function watchDeal2() {
						var cnt = 0,
							$a = $frmDeal2.find("a.btnPayNow"),
							$regular = $frmDeal2.find(".dealRegularPrice").html(0),
							$deal = $frmDeal2.find(".dealYourPrice").html(0),
							s1 = $frmDeal2.find('select[name="product_id[0]"]').find("option:selected").val(),
							s2 = $frmDeal2.find('select[name="product_id[1]"]').find("option:selected").val(),
							isProductChanged = /^product_id\[[0|1]\]$/.test(this.name),
							isAllProductSelected = /^\d+:dev$/.test(s1) && /^\d+:dev$/.test(s2);
						
						if (isProductChanged && isAllProductSelected) {
							$.post("payments/free-deal/", $frmDeal2.serialize()).done(function (data) {
								$frmDeal2.find('select[name="free_product_id[0]"]').parent().html(data.replace(/#\{X\}/g, '#1').replace('{ID}', 0)).find("select");
								$frmDeal2.find('select[name="free_product_id[1]"]').parent().html(data.replace(/#\{X\}/g, '#2').replace('{ID}', 1)).find("select");
								$frmDeal2.find('select[name="free_product_id[2]"]').parent().html(data.replace(/#\{X\}/g, '#3').replace('{ID}', 2)).find("select");
							});
							return;
						}
						
						if (!isAllProductSelected) {
							$frmDeal2.find('select[name^="free_product_id["]').find("option:not(:first)").remove().end().trigger("chosen:updated");
						}
						
						$frmDeal2.find('select[name^="product_id["], select[name^="free_product_id["]').each(function () {
							if (/^\d+:(user|dev)$/.test($(this).find("option:selected").val())) {
								cnt += 1;
							}
						});
						
						if (cnt !== 5) {
							return;
						}
						
						$.post("payments/validate-deal/", $frmDeal2.serialize()).done(function (data) {
							if (data && data.status && data.status === "OK") {
								$a.attr("href", data.href);
								
								$regular.html(data.regular_price);
								$deal.html(data.deal_price);
							} else {
								$a.attr("href", "#");
							}
						}).fail(function () {
							$a.attr("href", "#");
						});
					}
				}
			});
		}).on("click", ".btn-buy-3", function () {
			$('#discountModal').find(".tab-discount").removeClass("active");
			$('#discountModal').find(".btn-buy-3").addClass("active");
			$.get("buy-3-get-50-pct-off.php").done(function (data) {
				$('#discountModal').find(".tab-content").html(data);
				$('#discountModal').modal("show");
				
				var $validatorDeal3, $frmDeal3 = $("#frmDeal3");
			
				if ($frmDeal3.length) {
					$frmDeal3.on("change", "select", function () {
						
						$validatorDeal3.element(this);
						
						watchDeal3();
					});
					
					$validatorDeal3 = $frmDeal3.validate({
						rules: {
							"product_id[0]": "required",
							"product_id[1]": "required",
							"product_id[2]": "required",
						},
						ignore: "",
						wrapper: 'li',
						errorLabelContainer: $frmDeal3.find('.formValidation ul'),
						errorClass: 'formError',
						onkeyup: false,
						submitHandler: function (form) {
							$frmDeal3.find("a.btnPaymentTrigger.btnPayNow").trigger("click");
							return false;
						}
					});
					
					function watchDeal3() {
						var cnt = 0,
							$a = $frmDeal3.find("a.btnPayNow"),
							$regular = $frmDeal3.find(".dealRegularPrice").html(0),
							$deal = $frmDeal3.find(".dealYourPrice").html(0);
						
						$frmDeal3.find('select[name^="product_id["]').each(function () {
							if (/^\d+:(user|dev)$/.test($(this).find("option:selected").val())) {
								cnt += 1;
							}
						});
						
						if (cnt !== 3) {
							return;
						}
						
						$.post("payments/validate-deal/", $frmDeal3.serialize()).done(function (data) {
							if (data && data.status && data.status === "OK") {
								$a.attr("href", data.href);
								
								$regular.html(data.regular_price);
								$deal.html(data.deal_price);
							} else {
								$a.attr("href", "#");
							}
						}).fail(function () {
							$a.attr("href", "#");
						});
					}

				}
			});
			
		}).on("click", ".tab-category", function () {
			$(".tab-category").removeClass("active");
			$(this).addClass("active");
			
			var category = $(this).prop("rev");
			$(".all-categories").addClass("d-none");
			$(".all-categories").removeClass("d-flex");
      $(".all-cards").addClass("d-none");
			$(".category-" + category).removeClass("d-none");
			$(".category-" + category).addClass("d-flex");
      $(".card-info-content-" + category).removeClass("d-none");
		}).on("click", ".dropdown-item", function () {
			  var title = $(this).prop("innerHTML");
       $("#dropdownMenuButton1").html(title);
      $('.dropdownOpen').removeClass('dropdownOpen');
			
			var category = $(this).prop("rev");
			$(".all-categories").addClass("d-none");
			$(".all-categories").removeClass("d-flex");
			$(".category-" + category).removeClass("d-none");
			$(".category-" + category).addClass("d-flex");
		}).on("click", ".btn-remove-url", function () {
			var url = $(this).data("url");
			$("#removeModal").modal("show");
			$(".btn-remove-from-cart").data("url", url);
		}).on("click", ".btn-remove-from-cart", function () {
			var url = $(this).data("url");
			$.get(url).done(function (data) {
				$("#removeModal").modal("hide");
				window.location.reload(true);
			});
		}).on("click", ".btn-home-prev, .btn-home-next", function () {
			var category = $(this).data("category"), 
				current = parseInt($(".category-item-" + category).attr("rev")),
				max = parseInt($(".category-item-" + category).attr("rel"));
			if (current == 0) {
				if ($(this).hasClass("btn-home-prev"))
				{
					current = max;
				} else {
					current++;
				}
			} else if (current == max) {
				if ($(this).hasClass("btn-home-prev"))
				{
					current--;
				} else {
					current = 0;
				}
			} else {
				if ($(this).hasClass("btn-home-prev"))
				{
					current--;
				} else {
					current++;
				}
			}
			$(".category-item-" + category).attr("rev", current);
			$(".data-item-home-" + category).addClass("hidden");
			$(".data-item-" + category + "-" + current).removeClass("hidden");
		});
		
		if ($('#support_qa_product').length) {
			var $qa_el,
				qa_str = '<dt>Notice: </dt><dd>This question may concern an older version of the {PRODUCT}. If you have similar question, please, <a href="/contact.php">contact us</a>!</dd>';
			$('.scriptAnswerNotice').each(function () {
				$qa_el = $(this);
				$qa_el.html(qa_str.replace(/\{PRODUCT\}/, $qa_el.data('script')))
			});
		}
		
		var $frmDownloadFree = $("#frmDownloadFree");
		if ($frmDownloadFree.length && validate) {
			var freeValidator = $frmDownloadFree.validate({
				rules: {
					"tac": "required",
					"download_type": {
						remote: "check-download/"
					}
				},
				wrapper: 'li',
				errorLabelContainer: $frmDownloadFree.find('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false,
				ignore: ".ignore",
				submitHandler: function (form) {
					$('.btnPopupTrigger[data-id="selectorSubscribe"]').trigger("click");
					freeValidator.resetForm();
					return true;
				}
			});
		}
		
		function trackHashLinks(hash) {
			switch (hash) {
			case '#sectionDemo':
				trackEvent.call(null, 'Script_Section_Demo', 'click', window.location.pathname);
				break;
			case '#sectionPricing':
				trackEvent.call(null, 'Script_Section_Pricing', 'click', window.location.pathname);
				break;
			}
		}
		
		function trackEvent(category, action, label, value) {
			if (typeof ga === "undefined") {
				return false;
			}
			
			switch (arguments.length) {
			case 2:
				return ga('send', 'event', category, action);
				break;
			case 3:
				return ga('send', 'event', category, action, label);
				break;
			case 4:
				return ga('send', 'event', category, action, label, value);
				break;
			default:
				return false;
			}
		}
		
		function trackFbEvent(eventName, objectProperties) {
			if (typeof fbq === "undefined") {
				return false;
			}
			
			switch (arguments.length) {
			case 1:
				return fbq('track', eventName);
				break;
			case 2:
				return fbq('track', eventName, objectProperties);
				break;
			default:
				return false;
			}
		}
		
		function trackShare(id, model, column) {
			return $.post("track-share/", {
				"id": id,
				"model": model,
				"column": column
			});
		}
		
		// Track banner impressions
		$(".bannerContainer").each(function() {
			var $bContainer = $(this),
				category = ['Banner', $bContainer.data("category"), $bContainer.data("id")].join('_');
			
			trackEvent.call(null, category, 'impression', {'nonInteraction': 1});
		});
		
		// Track mega sale banner impressions
		$(".msContainer").each(function() {
			var $bContainer = $(this),
				category = ['MS', $bContainer.data("category"), $bContainer.data("id")].join('_');
			
			trackEvent.call(null, category, 'impression', {'nonInteraction': 1});
		});
		
		var $testimonialVideo = $('#testimonialVideo');
		if ($testimonialVideo.length) {
			$.get('testimonial-video').done(function (data) {
				$testimonialVideo.html(data);
				
				sliderFade.call(null, '.sliderTestimonials .slides', $testimonialVideo);
				sliderSwipe.call(null, '.swipeableThumbs ul, .sliderSwipeable .slides', $testimonialVideo);
				
				addIframeDialog.call(null, $testimonialVideo.find(".btnPopupIframe"));
			});
		}
		
		function addIframeDialog(selector) {
			var $element;
			if (selector instanceof jQuery) {
				$element = selector;
			} else {
				$element = $(selector);
			}
			if ($element.length && colorbox) {
				$element.colorbox({
					iframe: true,
					width: "70%",
					height: "70%"
				});
			}
		}
		
		function getTickets() {
			var $myTickets = $('#myTickets');
			if (!$myTickets.length) {
				return;
			}
			$myTickets.addClass("loading");
			$.get('account/my-tickets/', {
				'offset': 0,
				'row_count': 5 
			}).done(function (data) {
				$myTickets.removeClass("loading").html(data);
			});
		}
		
		function getOrders() {
			var $myOrders = $('#myOrders');
			if (!$myOrders.length) {
				return;
			}
			$myOrders.find(".subsectionBody").addClass("loading");
			$.get('account/my-orders/', {
				'offset': 0,
				'row_count': 5 
			}).done(function (data) {
				$myOrders.html(data);
			});
		}
		
		function checkMegaSale() {
			var $nav = $(".navSecondaryMegaBundle");
			if (!$nav.length) {
				return;
			}
			
			var $tab = $nav.find(".tabMegaBundle");
			if (!$tab.length) {
				return;
			}
			
			$.get("account/mega-sale-check/").done(function(data) {
				if (data && data.status && data.status === "OK") {
					$tab.addClass("active");
				} else {
					$tab.remove();
				}
			});
		}
		
    	function resizeColorbox() {
    		var $cbox = $("#cboxContent").find(".popup");
    		if ($cbox.length && colorbox) {
	        	$.colorbox.resize({
	        		width: $cbox.outerWidth() + 36,
	        		height: $cbox.outerHeight() + 36
	        	});
    		}
    	}
		
		function getRemotelyPrices(script_id) {
			$.get('remotely-hosted/', {
				"script_id": script_id
			}).done(function (data) {
				$("#remotely-pricing").html(data);
			});
		}
		
		var location = window.location,
			search = location.search,
			pathname = location.pathname,
			m = search.match(/script=(\d+)/);
		
		if (/remotely-hosted-scripts\.php$/.test(pathname)) {
			if (m !== null) {
				$('select[name="product_id"]').val(m[1]);
				getRemotelyPrices.call(null, m[1]);
			} else {
				getRemotelyPrices();
			}
		}
		
		if (/account\/dashboard$/.test(pathname)) {
			getTickets();
			getOrders();
		}
		
		if (/^\/account\//.test(pathname)) {
			checkMegaSale();
		}
		
		function getPreferedUrl() {
			return window.location.origin + window.location.pathname;
		}
		
		function getPosition() {
			var D = 550, 
				A = 450, 
				C = screen.height, 
				B = screen.width, 
				H = Math.round((B/2)-(D/2)), 
				G = (C > A) ? Math.round((C/2)-(A/2)) : 0;
			
			return {
				width: D,
				height: A,
				top: G,
				left: H
			};
		}
		
		/*if (location.hash.match(/^#o_\d{10,}$/)) {
			setTimeout(function () {
				fixScrollTop();
			}, 1000);
		}*/
		
		var $infiniteTestimonials = $(".sectionSubsectionTestimonials .testimonials");
		if ($infiniteTestimonials.length && pjInfiniteScroll) {
			$infiniteTestimonials.pjInfiniteScroll({
				autoLoad: false,
				loadMoreClass: "btn btnPrimary",
				loadMoreWrapperClass: "sectionMoreActions",
				indicatorWrapperClass: "sectionMoreLoading", 
				url: "get-testimonials/"
			});
		}
		
		var $sectionMoreScripts = $("#sectionMoreScripts");
		if ($sectionMoreScripts.length) {
			$.get(["free/more-scripts/", $sectionMoreScripts.data("id"), "/"].join("")).done(function (data) {
				$sectionMoreScripts.html(data);
				
				sliderFixedElementWidth.call(null, '.sliderScriptsAlt .slides', $sectionMoreScripts);
			});
		}
		
		//For Sticky Header and Bar. We have .pageTop that wraps them both. When scroll is > 1 they become sticked to the top side of the window
		if ($('.pageTop').length) {
			$win.on('load scroll resize', function() {
				var $headerWrapper = $('.pageTop');

				if (($(this).scrollTop() > 1) && ($win.width() > 768)) {
					$headerWrapper.addClass('pageTopSticked');
				} else {
					$headerWrapper.removeClass('pageTopSticked');
				};

				//Fixes the problem with to long navigation dropdown for laptops.
				var $navDropdownHeight = $('.dropdown .dropdownInner').outerHeight();
				var $navDropdownMaxHeight = $win.outerHeight() - ($('.bar').outerHeight() + $('#header').outerHeight());
				var $navDropdownNewHeight = $navDropdownMaxHeight - ($('.dropdown .dropdownFoot').outerHeight())
				if (($navDropdownHeight >= $navDropdownMaxHeight) && ($win.outerWidth() > 767)) {
					$('.dropdown .dropdownBody').css('overflow-y', 'auto').css('max-height', $navDropdownNewHeight);
				};
			});
		};

		//Remove dropdowns on click outside the box
		$doc.on('click', function(e) {
			if ((!$(e.target).parents().hasClass('hasDropdown')) && ($win.width() > 768)) {
				$('.dropdownOpen').removeClass('dropdownOpen');
			};

			if ((!$(e.target).parents().hasClass('sectionAccess')) && (!$(e.target).hasClass('accessTrigger'))) {
				$('.sectionAccess').removeClass('sectionOpen');
			};
		});

		//For main navigation
		if ($('.nav').length) {
			//Show hide navigation for screens under 769px
			$('.btnNavTrigger').on('click', function(e) {
				$(this).toggleClass('active');

				$('.nav').stop(true, true).slideToggle("slow");

				$('.dropdownOpen').removeClass('dropdownOpen');

				e.preventDefault();
			});

			//Show hide navigation dropdowns
			$('.nav > ul > .hasDropdown > a').on('click', function(e) {
				$(this).parent().toggleClass('dropdownOpen').siblings().removeClass('dropdownOpen');

				e.preventDefault();
			});
		};

		//Show hide login dropdown
		var $sectionAccess = $('.sectionAccess');
		if ($sectionAccess.length) {
			$('.accessTrigger').on('click', function(e) {
				if ($sectionAccess.hasClass('sectionOpen')) {
					$sectionAccess.removeClass('sectionOpen');
				} else {
					$sectionAccess.addClass('sectionOpen');
					if (!$sectionAccess.hasClass('sectionAccessSuccessful')) {
						trackEvent.call(null, 'Login_Header', 'open', window.location.pathname);
					}
				}
				e.preventDefault();
			});
		};

		$('.megaSaleBarLink a').each(function(index){
		    var button = $(this);

		    setInterval(function(){
		        button.toggleClass('stop');
		    }, 2100);
		});

		$('.pageAsideMegaSale .btnPageAction').each(function(index){
		    var button = $(this);

		    setInterval(function(){
		        button.toggleClass('stop');
		    }, 1000);
		});

		if ($('.pageAsideMegaSale').length) {
			var $pageAsideMegaSale = $('.pageAsideMegaSale');
			var pageAsideMegaSaleActiveClass = 'pageAsideMegaSaleActive';

			$win.on('scroll', function() {
				var $offsetForShow = $('.pageTop').outerHeight();

				if ($(this).scrollTop() > $offsetForShow) {
					$pageAsideMegaSale.addClass(pageAsideMegaSaleActiveClass);
				} else {
					$pageAsideMegaSale.removeClass(pageAsideMegaSaleActiveClass);
				};
			});

			$pageAsideMegaSale.on('mouseenter', function(){
				$pageAsideMegaSale.addClass('pageAsideMegaSaleOpen');
			});
			$pageAsideMegaSale.on('mouseleave', function(){
				$pageAsideMegaSale.removeClass('pageAsideMegaSaleOpen');
			});
		}
		
		// Mega Sale Limited Offer countdown
		var $sectionLimitedOfferTime = $(".sectionLimitedOfferTime");
		if ($sectionLimitedOfferTime.length && typeof easytimer !== "undefined") {
			var timer = new easytimer.Timer();
			
			timer.start({
				countdown: true, 
				startValues: {
					hours: $sectionLimitedOfferTime.data("hours"),
					minutes: $sectionLimitedOfferTime.data("minutes"),
					seconds: $sectionLimitedOfferTime.data("seconds")
				}
			});
			
			$sectionLimitedOfferTime.html(timer.getTimeValues().toString());
			
			timer.addEventListener('secondsUpdated', function (e) {
				$sectionLimitedOfferTime.html(timer.getTimeValues().toString());
			});
			
			timer.addEventListener('targetAchieved', function (e) {
				window.location.reload(true);
			});
		}

		//Section How to is on page script-home.php sticked to the left side of your screen after scroll is below header
		if ($('.pageAside').length) {
			var $pageAside = $('.pageAside');
			var pageAsideActiveClass = 'pageAsideOpen';
			var $pageAsideInnersTrigger = $('.pageAsideTrigger');
			var pageAsideInner = '.pageAsideInner';
			var pageAsideInnerActiveClass = 'pageAsideInnerOpen';

			$win.on('scroll', function() {
				var $offsetForShow = $('.pageTop').outerHeight();

				if ($(this).scrollTop() > $offsetForShow) {
					$pageAside.addClass(pageAsideActiveClass);
				} else {
					$pageAside.removeClass(pageAsideActiveClass);
					$(pageAsideInner).removeClass(pageAsideInnerActiveClass);
				};
			});

			$doc.on('mouseover', function(e) {
				var $el = $(e.target);
				if (($el.parents('.pageAside').length) && (!$el.parents(pageAsideInner).hasClass(pageAsideInnerActiveClass))) {
					$el.parents(pageAsideInner).addClass(pageAsideInnerActiveClass);
					if (e.target.nodeName === 'A' && $el.data('category') !== undefined) {
						trackEvent.call(null, $el.data("category"), 'open', window.location.pathname);
					}
				} else if (!$el.parents('.pageAside').length) {
					$(pageAsideInner).removeClass(pageAsideInnerActiveClass);
				};
			}).on("click", ".pageAsideNav li a", function (e) {
				trackEvent.call(null, 'Product_Menu', 'click', $(this).attr("href"));
			}).on("click", ".sectionHowTo .sectionBody a", function (e) {
				trackEvent.call(null, 'DoYouKnow_Menu', 'click', $(this).attr("href"));
			}).on("click", ".pageAsideArticleInner a", function (e) {
				trackEvent.call(null, 'PrevNext_Menu', 'click', $(this).attr("href"));
			});

			$pageAsideInnersTrigger.on('click', function(e) {

				e.preventDefault();
			});

			//The slider inside section "How To"
			var $sliderHowTo = $('.sliderHowTo .slides');
			if ($sliderHowTo.length) {
				$sliderHowTo.carouFredSel({
					items: 1,
					responsive: true,
					scroll: {
						pauseOnHover: true,
						duration: 1000
					},
					prev: {
						button: function(){
							return $(this).parents('.slider').find('.sliderPrev');
						}
					},
					next: {
						button: function(){
							return $(this).parents('.slider').find('.sliderNext');
						}
					}
				});
			}
		};

		//This is "Got to top" button. You can find it on page script-home.php at the bottom right side of your screen after scroll is below 200px
		if ($('.pageActions').length) {
			var $sectionActions = $('.pageActions'),
				$sectionActionsIsGift = ($sectionActions.length && $sectionActions.hasClass('pageActionsChristmasGift'));

			$win.on('scroll', function() {
				if ($(this).scrollTop() > 200) {
					$sectionActions.addClass('pageActionsActive')
					if ($sectionActionsIsGift) {
						$sectionActions.addClass('pageActionsActiveImportant');
					}
				} else{
					$sectionActions.removeClass('pageActionsActive')
					if ($sectionActionsIsGift) {
						$sectionActions.removeClass('pageActionsActiveImportant');
					}
				};
			});

			$sectionActions.on('click', '.btnGoTop', function(e) {
				$('html, body').animate({
					scrollTop: 0
				}, 1000);

				e.preventDefault();
			});
		};

		//You can find this navigation on page script-home-section-demos-two.php at the beginning of section "product highlights" this navigation scrolls through the page sections. The function for it is "ScrollSpy" last in the file
		if ($('.navAside').length) {
			var $navAside = $('.navAside');
			//Fix the navigation when scroll reaches it
			$win.on('scroll', function() {
				var $topOffset = $('.bar').outerHeight() + $('#header').outerHeight() + $('.sectionIntro').outerHeight();
				var fixingClass = 'navAsideFixed';

				if ($(this).scrollTop() > $topOffset) {
					$navAside.addClass(fixingClass);
				} else {
					$navAside.removeClass(fixingClass);
				};
			});

			//scrollspy function is responsible for the navigation to follow the section shown on the screen
			var scrollspy = new ScrollSpy({
				linksContainerSelector: '.navAside',
				sectionSelector: '.sectionSpy',
				headerOffset: true
			});

			scrollspy.init();

			$win.on('load resize', function() {
				scrollspy.refreshPositions();
			});

			//Helps "ScrollSpy" function to work better on click
			//When you click on a link of the navigation the section connected with it will be shown at the center of your screen
			$navAside.on('click', 'a', function(e) {
				e.preventDefault();

				var $clickedLink = $(this);
				var $clickedLinkHref = $(this).attr('href');
				var $demandedSection = $('.sectionSpy').filter($clickedLinkHref).offset().top;
				
				var $winHeight = $win.outerHeight();
				var $demandedSectionHeight = $('.sectionSpy').filter($clickedLinkHref).outerHeight();

				if ($demandedSectionHeight > $winHeight) {
					$('html,body').animate({
						scrollTop: $demandedSection
					}, 1000);
				} else {
					$('html,body').animate({
						scrollTop: $demandedSection - (($winHeight/2) - $demandedSectionHeight/2)
					}, 1000);
				};
			});
		};

		//Show elements when page scroll reached their top offset. Works with "fnDoViewOnScroll" function
		//Every element that have this two classes 'activeElement notViewed' and data attribute(data-position="top, right, botton or left") will be hidden till the time when scroll reached it. The data attribute is for the direction from which the element will come
		//Stopped because of a problem with google bot rendering.
		/*if ($('.activeElement').length) {
			var $activeElements = $('.activeElement.notViewed');
			$win.on('load scroll', function(e) {
				$activeElements.each(function(i, element) {
					var $currentElement = $(this);
					if ($currentElement.hasClass('viewed')) {
						return;
					} else {
						fnDoViewOnScroll($currentElement);
					};
				});
			})
		};*/

		//This is for Accordion functionality on page knowledge-base.php
		//For each accordion there are 2 parts head and body, when you click on head it opens the body, if the body is open the click will close it. You can have only one open body at time.
		//Event listener moved to the document. That's way makes accordions included dynamically to works too.
		$doc.on('click', '.accordionHead .accordionTitle a', function(e) {
			var $allAccordionLinks = $('.accordionHead .accordionTitle a');
			var $clickedLink = $(this);
			var activeClass = 'clicked';

			if ($clickedLink.closest('.accordionHead').siblings('.accordionBody').length) {
				if ($('.accordionOpen').length) {
					$('.accordionOpen').children('.accordionBody').stop(true, true).slideUp("slow");
					$('.accordionOpen').removeClass('accordionOpen');
				};

				if ($clickedLink.hasClass(activeClass)) {
					$clickedLink.removeClass(activeClass);

					$clickedLink.closest('.accordionHead').siblings('.accordionBody').stop(true, true).slideUp("slow");
				} else {
					$allAccordionLinks.removeClass(activeClass);
					$clickedLink.addClass(activeClass);

					$allAccordionLinks.closest('.accordionHead').siblings('.accordionBody').stop(true, true).slideUp('slow');

					$clickedLink.closest('.accordionHead').siblings('.accordionBody').stop(true, true).slideDown('slow');
				};
				
				e.preventDefault();
			};
		}).on('navigate', '.accordionHead .accordionTitle a', function(e) {
			var $allAccordionLinks = $('.accordionHead .accordionTitle a');
			var $clickedLink = $(this);
			var activeClass = 'clicked';

			if ($clickedLink.closest('.accordionHead').siblings('.accordionBody').length) {
				if ($('.accordionOpen').length) {
					$('.accordionOpen').children('.accordionBody').hide();
					$('.accordionOpen').removeClass('accordionOpen');
				};

				if ($clickedLink.hasClass(activeClass)) {
					$clickedLink.removeClass(activeClass);

					$clickedLink.closest('.accordionHead').siblings('.accordionBody').hide();
				} else {
					$allAccordionLinks.removeClass(activeClass);
					$clickedLink.addClass(activeClass);

					$allAccordionLinks.closest('.accordionHead').siblings('.accordionBody').hide();

					$clickedLink.closest('.accordionHead').siblings('.accordionBody').show();
				};
			};
		});
		
		function openQuestion() {
			if (location.hash.match(/^#q\d+$/)) {
				var qid = location.hash.match(/^#q\d+$/);
				if (qid !== null) {
					$(qid[0]).find(".accordionHead .accordionTitle a").trigger("navigate");
				}
			}
		}
		openQuestion.call(null);
		
		(function () {
			var m = window.location.hash.match(/^#.+$/);
			if (m !== null) {
				
				if (!/^#[a-zA-Z]/.test(m[0])) {
					return;
				}
				
				var $el = $(m[0]);
				if (!$el.length) {
					return;
				}
				
				trackHashLinks.call(null, m[0]);
				var $wayPoint = $el.offset().top - ($('.pageTop').outerHeight());
		
				$('html, body').animate({
					scrollTop: $wayPoint
				}, 3000);
			}
		})();

		//This is for the navigation at the bottom of the first section(under header). When window width is less than 991px the navigation is replaced by CSS Pseudo element(:before) that shows/hide the navigation
		if ($('.navSecondary').length) {
			$('.navSecondary').on('click', function(e) {
				if ((e.target == this) && ($win.width() < 991)) {
					$('.navSecondary ul').stop(true, true).slideToggle('slow');
				};
			});
		};

		//This is for the pricing table on page script-home.php. Add shadow to all cells in column after you hover one of them
		if ($('.tableLicenses').length) {
			$('.tableLicenses table').delegate('td, th','mouseover mouseleave', function(e) {
				if (e.type === 'mouseover') {
					var $hoveredCellIndex = $(this).index();
					$('.tableLicenses td, .tableLicenses th').each(function() {
						if ($(this).index() === $hoveredCellIndex) {
							$(this).addClass('cellHovered');
						};
					});
				} else {
					$('.cellHovered').removeClass('cellHovered');
				};
			});
		};

		//For the syntax elements on page tutorial-details.php
		if ($('pre').length && typeof SyntaxHighlighter !== 'undefined') {
			SyntaxHighlighter.config.stripBrs = true;
			SyntaxHighlighter.defaults['auto-links'] = false;
			SyntaxHighlighter.defaults['toolbar'] = false;
			SyntaxHighlighter.all();
		}

		//This is for all comments sections. When the "reply" button is clicked it append the form from the bottom of the section to the relevant comment. Click on cancel button append the form back to the bottom of the section. 
		if ($('.sectionComments').length) {
			var $commentsForm = $('.sectionComments .formComment');

			$('.btnReplyFormTrigger').on('click', function(e) {
				var $currentComment = $(this).parents('.comment').first();
				$currentComment.append($commentsForm);

				$commentsForm.find('#comment_id').remove();
				$commentsForm.find("form").append(['<input type="hidden" name="comment_id" id="comment_id" value="', $(this).data('id'), '" />'].join(''));
				
				e.preventDefault();
			});

			$('.btnReplyFormUnTrigger').on('click', function(e) {
				$('.sectionComments .sectionFoot').append($commentsForm);
				
				$commentsForm.find('#comment_id').remove();

				e.preventDefault();
			});
		};
		
		var $bid = $("#bid");
		if ($bid.length && $.fn.spinner !== undefined) {
			var $btnBidButton = $(".btnBidButton"),
				$btnBidPlaceholder = $(".btnBidPlaceholder"),
				$bidDepositRequired = $("#bidDepositRequired");
			$bid.spinner({
				min: 2999,
				spin: function (event, ui) {
					var factor = Math.pow(10, 2);
					var number = ui.value * 0.1;
					var deposit = Math.round(number * factor) / factor;
					
					$bidDepositRequired.html(deposit);
				},
				change: function (event, ui) {
					$btnBidButton.hide();
					$btnBidPlaceholder.show();
					
					$.post("payments/validate-deal/", {
						do_bid: 1,
						amount: $bid.val()
					}).done(function (data) {
						if (data && data.status && data.status === "OK") {
							$btnBidPlaceholder.hide();
							$btnBidButton.attr("href", data.href).show();
							$bidDepositRequired.html(data.deposit);
						}
					});
				}
			});
		}

		var $frmAjaxDeleteAccount = $("#frmAjaxDeleteAccount");
		if ($frmAjaxDeleteAccount.length && validate) {
			$frmAjaxDeleteAccount.validate({
				submitHandler: function (form) {
					var $form = $(form),
						$btn = $form.find(":button");
					$btn.prop("disabled", true);
					$.post("account/delete-account/", $form.serialize()).done(function (data) {
						if (!data.status) {
							return;
						}
						switch (data.status) {
						case 'OK':
							$("#deleteModal").modal("close");
							window.location.reload(true);
							break;
						case 'ERR':
							$frmAjaxDeleteAccount.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
					    	resizeColorbox();
							break;
						}
					}).always(function () {
						$btn.prop("disabled", false);
					});
					return false;
				}
			});
		}
		
		var $frmAjaxSuggestTool = $("#frmAjaxSuggestTool");
		if ($frmAjaxSuggestTool.length && validate) {
			$frmAjaxSuggestTool.validate({
				rules: {
					name: "required",
					email: {
						required: true,
						email: true
					},
					url: {
						required: true,
						url: true
					},
					reciprocal: {
						required: true,
						url: true
					}
				},
				onkeyup: false,
				wrapper: 'em',
				showErrors: function (errorMap, errorList) {
					this.defaultShowErrors();
					resizeColorbox();
				},
				submitHandler: function (form) {
					var $form = $(form),
						$btn = $form.find(":button");
					$btn.prop("disabled", true);
					$.post($form.attr("action"), $form.serialize()).done(function (data) {
						if (!data.status) {
							return;
						}
						switch (data.status) {
						case 'OK':
							$("#freeModal").modal("hide");
							break;
						case 'ERR':
							$frmAjaxSuggestTool.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
							break;
						}
					}).always(function () {
						$btn.prop("disabled", false);
					});
					return false;
				}
			});
		}
		
		var $frmAjaxRegister = $("#frmAjaxRegister");
		if ($frmAjaxRegister.length && validate) {
			$frmAjaxRegister.validate({
				rules: {
					"name": "required",
					"email": {
						required: true,
						email: true
					},
					"password": "required",
					"confirm": {
						required: true,
						equalTo: "#frmAjaxRegisterPassword"
					}
				},
				onkeyup: false,
				wrapper: 'em',
				showErrors: function (errorMap, errorList) {
					this.defaultShowErrors();
				},
				submitHandler: function (form) {
					var tab,
						$form = $(form),
						$btn = $form.find(":button");
					
					if ($form.find('input[name="un"]').length) {
						tab = window.open('https://demo.phpjabbers.com/redirect.php', '_blank');
					}
					
					$btn.prop("disabled", true);
					$.post("accounts/register", $form.serialize()).done(function (data) {
						if (!data.status) {
							return;
						}
						switch (data.status) {
						case 'OK':
							trackEvent.call(null, 'Register_Dialog', 'success', window.location.pathname);
							$frmAjaxRegister.find(".formAlert").removeClass("formAlertDanger").addClass("formAlertSuccess").html(data.text).show();
							$frmAjaxRegister.find("input.field").val("").first().focus();
							if (data.redirect) {
								window.setInterval(function () {
									
									if (data.target && data.target === "_blank") {
										
										if (tab) {
											tab.location = data.redirect;
										}
										
										window.location.reload(true);
									} else {
										window.location.href = data.redirect;
									}

								}, 1500);
							} else {
								$("#registerDownload").modal("hide");
							}
							break;
						case 'ERR':
							if (tab) {
								tab.close();
							}
							trackEvent.call(null, 'Register_Dialog', 'error', window.location.pathname);
							$frmAjaxRegister.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
							break;
						}
					}).always(function () {
						$btn.prop("disabled", false);
					}).fail(function () {
						if (tab) {
							tab.close();
						}
					});
					return false;
				}
			});
			trackEvent.call(null, 'Register_Dialog', 'open', window.location.pathname);
		}
		
		var $frmAjaxContact = $("#frmAjaxContact");
		if ($frmAjaxContact.length && validate) {
			$frmAjaxContact.validate({
				rules: {
					name: "required",
					email: {
						required: true,
						email: true
					}
				},
				onkeyup: false,
				wrapper: 'em',
				showErrors: function (errorMap, errorList) {
					this.defaultShowErrors();
				},
				submitHandler: function (form) {
					var $form = $(form),
						action = $form.attr("action"),
						$btn = $form.find(":button");
					$btn.prop("disabled", true);
					$.post(action, $form.serialize()).done(function (data) {
						if (!data.status) {
							return;
						}
						switch (data.status) {
						case 'OK':
							trackEvent.call(null, 'MS_ContactUs_Dialog', 'contact', 'success');
							$frmAjaxContact.find(".formAlert").removeClass("alert-danger").addClass("alert-success").html(data.text).removeClass("d-none");
							$frmAjaxContact.find(".field:not([readonly]), .textarea").val("");
							break;
						case 'ERR':
							trackEvent.call(null, 'MS_ContactUs_Dialog', 'contact', 'error');
							$frmAjaxContact.find(".formAlert").removeClass("alert-success").addClass("alert-danger").html(data.text).removeClass("d-none");
							break;
						}
					}).fail(function () {
						trackEvent.call(null, 'MS_ContactUs_Dialog', 'contact', 'fail');
					}).always(function () {
						$btn.prop("disabled", false);
					});
					return false;
				}
			});
		}		
		// This is for popups you can find one on page blog-details.php "Log in" link aside of "Add your comment" form. 
		// When you click on a element with class .btnPopupTrigger it opens the popup connected with it. The popup is 
		// inside href attribute. You can have only one popup inside the first called popup, if we need more talk with me.
		if (colorbox) {
			var colorboxOptions = {
				scrolling: false,
				closeButton: false,
				onComplete: function() {
					var $this = $(this),
						$popup = $('.popup');
					
					$popup.on('click', '.btnPopupClose', function(e) {
						e.preventDefault();
						$.colorbox.close();
					});
					
					var $frmAjaxForgot = $popup.find("#frmAjaxForgot");
					if ($frmAjaxForgot.length && validate) {
						$frmAjaxForgot.validate({
							rules: {
								"email": {
									required: true,
									email: true
								}
							},
							onkeyup: false,
							wrapper: 'em',
							showErrors: function (errorMap, errorList) {
								this.defaultShowErrors();
								resizeColorbox();
							},
							submitHandler: function (form) {
								var $form = $(form),
									$btn = $form.find(":button");
								$btn.prop("disabled", true);
								$.post("accounts/password-recovery", $form.serialize()).done(function (data) {
									if (!data.status) {
										return;
									}
									switch (data.status) {
									case 'OK':
										trackEvent.call(null, 'Forgot_Dialog', 'success', window.location.pathname);
										$frmAjaxForgot.find(".formAlert").removeClass("formAlertDanger").addClass("formAlertSuccess").html(data.text).show();
										$frmAjaxForgot.find("input.field").val("").first().focus();
										if (data.redirect) {
											window.setInterval(function () {
												window.location.href = data.redirect;
											}, 1500);
										} else {
											$.colorbox.close();
										}
										break;
									case 'ERR':
										trackEvent.call(null, 'Forgot_Dialog', 'error', window.location.pathname);
										$frmAjaxForgot.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
								    	resizeColorbox();
										break;
									}
								}).always(function () {
									$btn.prop("disabled", false);
								});
								return false;
							}
						});
						trackEvent.call(null, 'Forgot_Dialog', 'open', window.location.pathname);
					}
					
					var $formReport = $popup.find(".formReport form");
					if ($formReport.length && validate) {
						$formReport.validate({
							rules: {
								foreign_id: "required",
								model: "required",
								email: {
									required: true,
									email: true
								},
								name: "required",
								description: "required"
							},
							wrapper: 'em',
							showErrors: function (errorMap, errorList) {
								this.defaultShowErrors();
						    	resizeColorbox();
							},
							submitHandler: function (form) {
								var $form = $(form),
									$btn = $form.find(":button");
								$btn.prop("disabled", true);
								$.post("report/", $form.serialize()).done(function (data) {
									if (data.status && data.status === 'OK') {
										$this.replaceWith('<span class="commentReported">reported</span>');
									}
									$.colorbox.close();
								}).always(function () {
									$btn.prop("disabled", false);
								});
								return false;
							}
						});
					}
					
					var $frmAjaxLogin = $popup.find("#frmAjaxLogin");
					if ($frmAjaxLogin.length && validate) {
						$frmAjaxLogin.validate({
							rules: {
								"email": {
									required: true,
									email: true
								},
								"password": "required"
							},
							onkeyup: false,
							wrapper: 'em',
							showErrors: function (errorMap, errorList) {
								this.defaultShowErrors();
								resizeColorbox();
							},
							submitHandler: function (form) {
								var tab,
									$form = $(form),
									$btn = $form.find(":button");
								
								if ($form.find('input[name="un"]').length) {
									tab = window.open('https://demo.phpjabbers.com/redirect.php', '_blank');
								}
								
								$btn.prop("disabled", true);
								$.post("accounts/login", $form.serialize()).done(function (data) {
									if (!data.status) {
										return;
									}
									switch (data.status) {
									case 'OK':
										trackEvent.call(null, 'Login_Dialog', 'success', window.location.pathname);
										if (data.redirect) {
											
											if (data.target && data.target === "_blank") {

												if (tab) {
													tab.location = data.redirect;
												}
												
												window.location.reload(true);
											} else {
												window.location.href = data.redirect;	
											}
											
										} else {
											$.colorbox.close();
										}
										break;
									case 'ERR':
										if (tab) {
											tab.close();
										}
										trackEvent.call(null, 'Login_Dialog', 'error', window.location.pathname);
										$frmAjaxLogin.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
								    	resizeColorbox();
										break;
									}
								}).always(function () {
									$btn.prop("disabled", false);
								}).fail(function () {
									if (tab) {
										tab.close();
									}
								});
								return false;
							}
						});
						trackEvent.call(null, 'Login_Dialog', 'open', window.location.pathname);
					}
					
					var $frmAjaxMakeAnOffer = $popup.find('#frmAjaxMakeAnOffer');
					if ($frmAjaxMakeAnOffer.length && validate) {
					
						var $offerSlider = $frmAjaxMakeAnOffer.find('#offer-slider'),
							offerSlider = $offerSlider.get(0),
							price = Number($offerSlider.data('price')),
							prefix = $frmAjaxMakeAnOffer.data("prefix");
						
						noUiSlider.create(offerSlider, {
							start: price,
							tooltips: wNumb({
								decimals: 0,
								prefix: prefix
							}),
							//padding: 10,
							step: 1,
							range: {
								'min': 1,
								'max': price * 2
							}
						});
						
						var $inputOffer = $frmAjaxMakeAnOffer.find('input[name="offer"]'),
							$labelOffer = $frmAjaxMakeAnOffer.find('#offer-price-offer');
						offerSlider.noUiSlider.on('update', function () {
							var value = Number(this.get()).toFixed(0);
							$inputOffer.val(value);
							$labelOffer.html(prefix + value);
						});
						
						$frmAjaxMakeAnOffer.on('change', 'input[name="licence"]', function () {
							var $this = $(this),
								price = Number($this.data('price'));
							
							switch ($this.val()) {
							case 'user':
								$frmAjaxMakeAnOffer.find('.offer-price-user').show();
								$frmAjaxMakeAnOffer.find('.offer-price-dev').hide();
								break;
							case 'dev':
								$frmAjaxMakeAnOffer.find('.offer-price-dev').show();
								$frmAjaxMakeAnOffer.find('.offer-price-user').hide();
								break;
							}
							
							offerSlider.noUiSlider.updateOptions({
								start: price,
								range: {
									'min': 1,
									'max': price * 2
								}
							}, false)
						}).validate({
							rules: {
								name: "required",
								email: {
									required: true,
									email: true
								},
								licence: "required",
								notes: "required"
							},
							onkeyup: false,
							wrapper: 'em',
							showErrors: function (errorMap, errorList) {
								this.defaultShowErrors();
								resizeColorbox();
							},
							submitHandler: function (form) {
								var $form = $(form),
									action = $form.attr("action"),
									$btn = $form.find(":button");
								$btn.prop("disabled", true);
								$.post(action, $form.serialize()).done(function (data) {
									if (!data.status) {
										return;
									}
									switch (data.status) {
									case 'OK':
										trackEvent.call(null, 'MakeAnOffer_Dialog', 'success', window.location.pathname);
										$frmAjaxMakeAnOffer.find(".formAlert").removeClass("formAlertDanger").addClass("formAlertSuccess").html(data.text).show();
										$.post(action + "?view=done", {
											"data": data.result
										}).done(function (data) {
											$frmAjaxMakeAnOffer.closest(".popup").removeClass('popupReport').addClass('popupLogReg').html(data);
											resizeColorbox();
										});
										break;
									case 'ERR':
										trackEvent.call(null, 'MakeAnOffer_Dialog', 'error', window.location.pathname);
										$frmAjaxMakeAnOffer.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
								    	resizeColorbox();
										break;
									}
								}).always(function () {
									$btn.prop("disabled", false);
								});
								return false;
							}
						});
						trackEvent.call(null, 'MakeAnOffer_Dialog', 'open', window.location.pathname);
					}
					
					var $frmAjaxDeleteAvatar = $popup.find("#frmAjaxDeleteAvatar");
					if ($frmAjaxDeleteAvatar.length && validate) {
						$frmAjaxDeleteAvatar.validate({
							submitHandler: function (form) {
								var $form = $(form),
									$btn = $form.find(":button");
								$btn.prop("disabled", true);
								$.post("account/delete-avatar/", $form.serialize()).done(function (data) {
									if (!data.status) {
										return;
									}
									switch (data.status) {
									case 'OK':
										$("#avatarBox").remove();
										$.colorbox.close();
										break;
									case 'ERR':
										$frmAjaxDeleteAvatar.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
								    	resizeColorbox();
										break;
									}
								}).always(function () {
									$btn.prop("disabled", false);
								});
								return false;
							}
						});
					}
					
					var $frmAjaxSendMessage = $popup.find("#frmAjaxSendMessage");
					if ($frmAjaxSendMessage.length && validate) {
						$frmAjaxSendMessage.validate({
							rules: {
								"question": "required"
							},
							onkeyup: false,
							wrapper: 'em',
							showErrors: function (errorMap, errorList) {
								this.defaultShowErrors();
								resizeColorbox();
							},
							submitHandler: function (form) {
								var $form = $(form),
									$btn = $form.find(":button");
								$btn.prop("disabled", true);
								$.post("account/send-message/", $form.serialize()).done(function (data) {
									if (!data.status) {
										return;
									}
									switch (data.status) {
									case 'OK':
										$.colorbox.close();
										break;
									case 'ERR':
										$frmAjaxSendMessage.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
								    	resizeColorbox();
										break;
									}
								}).always(function () {
									$btn.prop("disabled", false);
								});
								return false;
							}
						});
					}
					
					var $frmAjaxMegaSaleSupport = $popup.find("#frmAjaxMegaSaleSupport");
					if ($frmAjaxMegaSaleSupport.length && validate) {
						$frmAjaxMegaSaleSupport.validate({
							rules: {
								"product_id": "required",
								"question": "required"
							},
							onkeyup: false,
							wrapper: 'em',
							showErrors: function (errorMap, errorList) {
								this.defaultShowErrors();
								resizeColorbox();
							},
							errorPlacement: function(error, element) {
								if (element.attr("name") == "product_id") {
									error.insertAfter(element.parent());
								} else {
									error.insertAfter(element);
								}
							},
							submitHandler: function (form) {
								var $form = $(form),
									$btn = $form.find(":button");
								$btn.prop("disabled", true);
								$.post("account/mega-sale-support/", $form.serialize()).done(function (data) {
									if (!data.status) {
										return;
									}
									switch (data.status) {
									case 'OK':
										$.colorbox.close();
										window.location.reload(true);
										break;
									case 'ERR':
										$frmAjaxMegaSaleSupport.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
								    	resizeColorbox();
										break;
									}
								}).always(function () {
									$btn.prop("disabled", false);
								});
								return false;
							}
						});
					}
					
					var $frmAjaxSubscribe = $popup.find("#frmAjaxSubscribe");
					if ($frmAjaxSubscribe.length && validate) {
						$frmAjaxSubscribe.validate({
							rules: {
								"name": "required",
								"email": {
									required: true,
									email: true
								}
							},
							onkeyup: false,
							wrapper: 'em',
							showErrors: function (errorMap, errorList) {
								this.defaultShowErrors();
								resizeColorbox();
							},
							submitHandler: function (form) {
								var $form = $(form),
									$btn = $form.find(":button");
								$btn.prop("disabled", true);
								$.post("subscribe/", $form.serialize()).done(function (data) {
									if (!data.status) {
										return;
									}
									switch (data.status) {
									case 'OK':
										trackEvent.call(null, 'Subscribe_Dialog', 'success', window.location.pathname);
										$frmAjaxSubscribe.find(".formAlert").removeClass("formAlertDanger").addClass("formAlertSuccess").html(data.text).show();
										$frmAjaxSubscribe.find("input.field").val("").first().focus();
										break;
									case 'ERR':
										trackEvent.call(null, 'Subscribe_Dialog', 'error', window.location.pathname);
										$frmAjaxSubscribe.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
										break;
									}
									resizeColorbox();
								}).always(function () {
									$btn.prop("disabled", false);
								});
								return false;
							}
						});
						trackEvent.call(null, 'Subscribe_Dialog', 'open', window.location.pathname);
					}
					
					var $frmAjaxFraudReq = $popup.find("#frmAjaxFraudReq");
					if ($frmAjaxFraudReq.length && validate) {
						$frmAjaxFraudReq.validate({
							rules: {
								"phone": "required"
							},
							onkeyup: false,
							wrapper: 'em',
							showErrors: function (errorMap, errorList) {
								this.defaultShowErrors();
								resizeColorbox();
							},
							submitHandler: function (form) {
								var $form = $(form),
									$btn = $form.find(":button");
								$btn.prop("disabled", true);
								$.post("account/confirm-order/", $form.serialize()).done(function (data) {
									if (!data.status) {
										return;
									}
									switch (data.status) {
									case 'OK':
										$frmAjaxFraudReq.find(".formAlert").removeClass("formAlertDanger").addClass("formAlertSuccess").html(data.text).show();
										resizeColorbox();
										break;
									case 'ERR':
										$frmAjaxFraudReq.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
								    	resizeColorbox();
										break;
									}
								}).always(function () {
									$btn.prop("disabled", false);
								});
								return false;
							}
						});
					}
					
					var $frmAjaxFraudResp = $popup.find("#frmAjaxFraudResp");
					if ($frmAjaxFraudResp.length && validate) {
						$frmAjaxFraudResp.validate({
							rules: {
								"code": "required"
							},
							onkeyup: false,
							wrapper: 'em',
							showErrors: function (errorMap, errorList) {
								this.defaultShowErrors();
								resizeColorbox();
							},
							submitHandler: function (form) {
								var $form = $(form),
									$btn = $form.find(":button");
								$btn.prop("disabled", true);
								$.post("account/confirm-order/", $form.serialize()).done(function (data) {
									if (!data.status) {
										return;
									}
									switch (data.status) {
									case 'OK':
										$.colorbox.close();
										window.location.reload();
										break;
									case 'ERR':
										$frmAjaxFraudResp.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
								    	resizeColorbox();
										break;
									}
								}).always(function () {
									$btn.prop("disabled", false);
								});
								return false;
							}
						});
					}
					
					var $frmAjaxMegaSaleExtend = $popup.find("#frmAjaxMegaSaleExtend");
					if ($frmAjaxMegaSaleExtend.length && validate) {
						$frmAjaxMegaSaleExtend.validate({
							rules: {
								"name": "required",
								"email": {
									required: true,
									email: true
								}
							},
							onkeyup: false,
							wrapper: 'em',
							showErrors: function (errorMap, errorList) {
								this.defaultShowErrors();
								resizeColorbox();
							},
							submitHandler: function (form) {
								var $form = $(form),
									$btn = $form.find(":button").prop("disabled", true);
								$.post($form.attr("action"), $form.serialize()).done(function (data) {
									if (!data.status) {
										return;
									}
									switch (data.status) {
									case 'OK':
										trackEvent.call(null, 'claim-promocode', 'success');
										
										$form.find(".field").val("");
										$frmAjaxMegaSaleExtend.find(".formAlert").removeClass("formAlertDanger hidden").addClass("formAlertSuccess").html(data.text);
								    	resizeColorbox();
										break;
									case 'ERR':
										trackEvent.call(null, 'claim-promocode', 'error');
										
										$frmAjaxMegaSaleExtend.find(".formAlert").removeClass("formAlertSuccess hidden").addClass("formAlertDanger").html(data.text);
								    	resizeColorbox();
										break;
									}
								}).always(function () {
									$btn.prop("disabled", false);
								});
								return false;
							}
						});
					}
				}
			};
			
			$doc.on("click", ".btnPopupTrigger", function (e) {
				$.colorbox($.extend({
					href: $(this).attr("href")
				}, colorboxOptions));
				
				if (e && e.preventDefault) {
					e.preventDefault();
				}
				return false;
			}).on("click", ".btnSubscriptionTrigger", function (e) {
				if (e && e.preventDefault) {
					e.preventDefault();
				}

				$.get($(this).attr("href")).done(function (data) {
					$("#subscriptionModal").find(".modal-content").html(data);
					$("#subscriptionModal").modal("show");
					
					var $frmAjaxSubscriptionPayment = $("#subscriptionModal").find("#frmAjaxSubscriptionPayment");
					if ($frmAjaxSubscriptionPayment.length && validate) {
						$frmAjaxSubscriptionPayment.on("change", 'input[name="order_type"]', function () {
							
							switch ($(this).val()) {
							case 'company':
								$frmAjaxSubscriptionPayment.find(".boxCompany").show();
								break;
							case 'personal':
								$frmAjaxSubscriptionPayment.find(".boxCompany").hide();
								break;
							}
							resizeColorbox();
						}).on("click", '.btn-submit-checkout', function () {
							var payment_method = $(this).data("payment");
							$frmAjaxSubscriptionPayment.find("input[name='payment_method']").val(payment_method);	
						}).validate({
							rules: {
								name: "required",
								email: {
									required: true,
									email: true
								},
								order_type: "required",
								country_iso: "required",
								payment_method: "required"
							},
							onkeyup: false,
							wrapper: 'em',
							showErrors: function (errorMap, errorList) {
								this.defaultShowErrors();
							},
							submitHandler: function (form) {
								var $form = $(form),
									$btn = $form.find(":button");
								$btn.prop("disabled", true);
								$.post("payments/subscription/", $form.serialize()).done(function (data) {
									if (!data.status) {
										return;
									}
									switch (data.status) {
									case 'OK':
										$frmAjaxSubscriptionPayment.find(".formAlert").removeClass("alert-danger").addClass("alert-success").html(data.text).show();
										$.post("payments/subscription/?view=payment", {
											"data": data.result
										}).done(function (data) {
											$frmAjaxSubscriptionPayment.find(".formAlert").html(data);
											resizeColorbox();
										});
										break;
									case 'ERR':
										$frmAjaxSubscriptionPayment.find(".formAlert").removeClass("alert-success").addClass("alert-danger").html(data.text).show();
										break;
									}
								}).always(function () {
									$btn.prop("disabled", false);
								});
								return false;
							}
						});
					}
					
				}).always(function () {
				});
				
				return false;
			}).on("click", ".btnPaymentTrigger", function (e) {
				if (e && e.preventDefault) {
					e.preventDefault();
				}

				$.get($(this).attr("href")).done(function (data) {
					if ($("#discountModal").length > 0) {
						$("#discountModal").modal("hide");
					}
					$("#paymentModal").find(".modal-content").html(data);
					$("#paymentModal").modal("show");
					
					var $frmAjaxRegularPayment = $("#paymentModal").find("#frmAjaxRegularPayment");
					if ($frmAjaxRegularPayment.length && validate) {
						$frmAjaxRegularPayment.on("change", 'input[name="order_type"]', function () {
							
							switch ($(this).val()) {
							case 'company':
								$frmAjaxRegularPayment.find(".boxCompany").show();
								break;
							case 'personal':
								$frmAjaxRegularPayment.find(".boxCompany").hide();
								break;
							}
							
						}).on("change", "#pid", function () {
							
							var hash = $(this).find("option:selected").data("hash");
							$frmAjaxRegularPayment.find('input[name="hash"]').val(hash);
							
						}).on("click", ".btn-ms-promo-code", function (e) {
							
							e.preventDefault();
							$(".boxPromoCodeAdd").toggleClass("hidden");
							
						}).on("click", ".btnMegaCodeAdd", function () {
							
							megaCodeAdd.call(this.form);
							
						}).on("keypress", "#frmAjaxSubscriptionPromoCode", function (e) {
							var key = e.which || e.keyCode;
							if (key === 13) {
								e.preventDefault();
								megaCodeAdd.call(this.form);
							}
						}).on("click", '.btn-submit-checkout', function () {
							var payment_method = $(this).data("payment");
							$frmAjaxRegularPayment.find("input[name='payment_method']").val(payment_method);
						}).validate({
							rules: {
								name: "required",
								email: {
									required: true,
									email: true
								},
								order_type: "required",
								country_iso: "required",
								payment_method: "required",
								accept_tos: "required"
							},
							onkeyup: false,
							wrapper: 'em',
							showErrors: function (errorMap, errorList) {
								this.defaultShowErrors();
							},
							submitHandler: function (form) {
								var $form = $(form),
									action = $form.attr("action"),
									$btn = $form.find(":button"),
									is_mega_sale = $form.find('input[name="mbs"][value="2"]').length;
								$btn.prop("disabled", true);
								$.post(action, $form.serialize()).done(function (data) {
									if (!data.status) {
										return;
									}
									switch (data.status) {
									case 'OK':
										if (is_mega_sale) {
											trackEvent.call(null, 'MS_BuyNow_Dialog', 'order', 'success');
											trackFbEvent.call(null, 'InitiateCheckout');
										}
										$frmAjaxRegularPayment.find(".formAlert").removeClass("alert-danger").addClass("alert-success").html(data.text).show();
										$.post(action + "?view=payment", {
											"data": data.result
										}).done(function (data) {
											$frmAjaxRegularPayment.find(".formAlert").html(data);
										});
										break;
									case 'ERR':
										if (is_mega_sale) {
											trackEvent.call(null, 'MS_BuyNow_Dialog', 'order', 'error');
										}
										$frmAjaxRegularPayment.find(".formAlert").removeClass("alert-success").addClass("alert-danger").html(data.text).show();
								    	if (data.code == 199) {
								    		$frmAjaxRegularPayment.find(":submit").remove();
								    	}
										break;
									}
								}).fail(function () {
									if (is_mega_sale) {
										trackEvent.call(null, 'MS_BuyNow_Dialog', 'order', 'fail');
									}
								}).always(function () {
									$btn.prop("disabled", false);
								});
								return false;
							}
						});
					}
				}).always(function () {
				});
				
				return false;
			});
		}
		
		function megaCodeAdd(form) {
			
			var $btn,
				$form = $(this),
				$code = $form.find('input[name="code"]'),
				$promo_code = $form.find('input[name="_promo_code"]'), 
				code = $code.val();
			
			if (!code) {
				$code.focus();
				return;
			}
			
			$btn = $form.find(".btn").prop("disabled", true);
			
			$.post("payments/mega-code-add/", {
				"code": code
			}).done(function (data) {
				
				if (data && data.status && data.status === "OK") {
					$form.find(".boxPromoCodeAdd, .boxPromoCodeLink").addClass("hidden");
					$form.find(".boxPromoCodeInfo").removeClass("hidden");
					$form.find(".boxPromoCode").html(data.result.code);
					$promo_code.val(data.result.code);
					$form.find('input[name="amount"]').val(data.result.amount);
					$form.find('input[name="hash"]').val(data.result.hash);
					
					$form.find(".formTitleTotal").replaceWith(data.result.price_t);
					
					$form.find(".formAlert").hide().empty().removeClass("formAlertSuccess formAlertDanger");
				} else {
					$code.val("");
					$promo_code.val("");
					$form.find(".formAlert")
						.removeClass("formAlertSuccess")
						.addClass("formAlertDanger")
						.html(data.text)
						.show();
				}
				
			}).always(function () {
				$btn.prop("disabled", false);
			});
		}
		
		if ($('.btnPopupTriggerDownload').length) {
			$('.btnPopupTriggerDownload').colorbox({
				closeButton: false,
				onComplete: function() {
					var $popup = $('.popup');
					
					$popup.on("click", ".btnPopupDownload", function (e) {
						$.colorbox.close();
						window.setTimeout(function() {
							window.location.reload(true);
						}, 1000);
						return true;
					}).on('click', '.btnPopupClose', function(e) {
						e.preventDefault();
						$.colorbox.close();
					});
				}
			});
		}
		
		/* this causes the chrome popup blocker to appear */
		/*$(".btnTriggerDownload").on("click", function (e) {
			window.location.reload(true);
		});*/
		
		if ($('.btnPopupTriggerRequest').length) {
			$('.btnPopupTriggerRequest').colorbox({
				closeButton: false,
				onComplete: function() {
					var $popup = $('.popup');
					
					$popup.on('click', '.btnPopupClose', function(e) {
						e.preventDefault();
						$.colorbox.close();
					});
					
					$popup.find("form").validate({
						rules: {
							message: "required",
							reason: "required"
						},
						messages: {
							message: "Message is required.",
							reason: "Reason is required."
						},
						showErrors: function (errorMap, errorList) {
							this.defaultShowErrors();
							resizeColorbox();
						},
						ignore: ".ignore",
						onkeyup: false,
						wrapper: 'li',
						errorLabelContainer: $popup.find('.formValidation ul'),
						errorClass: 'formError',
						submitHandler: function (form) {
							
							var $form = $(form),
								$alert = $form.find(".formAlert").addClass("hidden"),
								$btn = $form.find(".btn").prop("disabled", true);
							
							$.post("account/mega-sale-refund/", $form.serialize()).done(function (data) {
						
								if (!(data && data.status)) {
									return;
								}
								
								if (data.status === "OK") {
									
									$alert
										.removeClass("formAlertDanger")
										.addClass("formAlertSuccess")
										.html(data.text)
										.removeClass("hidden");
									resizeColorbox();
									
									window.setTimeout(function () {
										$.colorbox.close();
										window.location.reload(true);
									}, 3000);
									
								} else {
									// show error
									$alert
										.removeClass("formAlertSuccess")
										.addClass("formAlertDanger")
										.html(data.text)
										.removeClass("hidden");
							    	resizeColorbox();
								}
								
							}).always(function () {
								$btn.prop("disabled", false);
							});
							
							return false;
						}
					});
				}
			});
		}
		
		//For image popups. If there are more than one triggers with the same attribute('data-imageGroup') the result will be displayed as a slider.
		if ($('.btnImagePopupTrigger').length) {
			fnDoImagePopup();
		}
		
		if ($('.btnInlinePopupTrigger').length) {
			fnDoInlinePopup();
		}
		
		//Product's home main video(+image) slider
		addIframeDialog.call(null, ".btnPopupIframe");
		
		var $frmProfile = $("#frmProfile");
		if ($frmProfile.length && validate) {
			$frmProfile.validate({
				rules: {
					"name": "required",
					"email": {
						required: true,
						email: true,
						remote: "account/email-check/"
					},
					"password": {
						"required": function (element) {
							return $("#new_password").val().length > 0;
						}
					},
					"confirm_password": {
						equalTo: "#new_password"
					}
				},
				onkeyup: false,
				wrapper: 'em'
			});
		}
		
		//Comment form validation
		var $frmComment = $("#frmComment");
		if ($frmComment.length && validate) {
			$frmComment.validate({
				rules: {
					"name": "required",
					"email": {
						required: true,
						email: true
					},
					"description": "required",
					"captcha": {
						required: true,
						maxlength: 6,
						remote: "captcha-check/"
					}
				},
				wrapper: 'li',
				errorLabelContainer: $frmComment.find('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false
			});
		}
		
		//Request demo validation
		var $frmRequestDemo = $("#frmRequestDemo");
		if ($frmRequestDemo.length && validate) {
			$frmRequestDemo.validate({
				rules: {
					"name": "required",
					"email": {
						required: true,
						email: true
					}
				},
				wrapper: 'li',
				errorLabelContainer: $frmRequestDemo.find('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false,
				submitHandler: function (form) {
					$(form).find(":submit").prop("disabled", true);
					return true;
				}
			});
		}
		
		//Contact form validation
		var $frmContact = $("#frmContact");
		if ($frmContact.length && validate) {
			$frmContact.on("change", "input[name='quote_type']", function (e) {
				switch (Number($(this).val())) {
					case 1:
						$(".aProject").hide();
						$(".aProduct").show();
						break;
					case 2:
						$(".aProject").show();
						$(".aProduct").hide();
						break;
				}
			}).on('change', 'input[type="file"]', function () {
				var name;
				if ('files' in this && this.files.length) {
					name = this.files[0].name;
				} else {
					name = this.value.split(/(\\|\/)/g).pop();
				}
				$(this).closest('.fileUpload').find('.fieldUploadedFile').val(name);
			}).validate({
				rules: {
					"name": "required",
					"email": {
						required: true,
						email: true
					},
					"question": "required",
					"captcha": {
						required: true,
						maxlength: 6,
						remote: "captcha-check/"
					}
				},
				wrapper: 'li',
				errorLabelContainer: $frmContact.find('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false,
				submitHandler: function (form) {
					
					$(form).find(":submit")
						.prop("disabled", true)
						.append('<i class="ico icoSpin"></i>');
					
					return true;	
				}
			});
		}
		
		//Contact form validation
		var $frmContactX = $("#frmContactX");
		if ($frmContactX.length && validate) {
			$frmContactX.validate({
				rules: {
					"name": "required",
					"email": {
						required: true,
						email: true
					},
					"product_id": "required"
				},
				wrapper: 'li',
				errorLabelContainer: $frmContactX.find('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false,
				submitHandler: function (form) {
					var $form = $(form),
						$btn = $form.find(":submit").prop("disabled", true);
					$btn.append('<i class="ico icoSpin"></i>');
					
					$.post("pre-contact/", $form.serialize()).done(function (data) {
						
						if (!(data && data.status && data.status === "OK")) {
							return;
						}
						
						switch (data.code) {
						case 200:
							$("#section-contact-notice-200")
								.find("#slot-ticket-id").html(data.summary.uuid).end()
								.find("#slot-product-name").html(data.summary.product).end();
							
							$(".btn-post-notify").attr("data-digest", data.summary.digest);
							
							$("#section-contact-notice-200").modal("show");
							break;
						case 201:
						case 202:
							$("#section-contact-notice-201")
								.find("#slot-account-created").html(data.summary.account_created).end()
								.find("#slot-latest-order").html(data.summary.latest_order).end()
								.find("#slot-latest-ticket").html(data.summary.latest_ticket);
							$("#section-contact-notice-201").modal("show");
							break;
						case 299:
							window.location.href = data.redirect_to;
							break;
						}
						
					}).always(function () {
						$btn.prop("disabled", false).find("i.ico").remove();
					});
					return false;
				}
			});
			
			$(".btn-post-notify").on("click", function (e) {
				e.preventDefault();
				
				$.post("post-notify/", {
					"digest": $(this).attr("data-digest")
				}).done(function (data) {

					$("#section-contact-notice-msg").html(data.text);
					$(".modal").modal("hide");
					$("#section-contact-notice-status").modal("show");
				});
			});
		}
		
		//Recovery email form validation
		var $frmRecoveryEmail = $("#frmRecoveryEmail");
		if ($frmRecoveryEmail.length && validate) {
			$frmRecoveryEmail.validate({
				rules: {
					"email": {
						required: true,
						email: true
					}
				},
				wrapper: 'em',
				onkeyup: false,
				submitHandler: function (form) {
					$(form).find(":submit").prop("disabled", true);
					return true;
				}
			});
		}
		
		//Recovery email form validation
		var $frmRecoveryOrder = $("#frmRecoveryOrder");
		if ($frmRecoveryOrder.length && validate) {
			$frmRecoveryOrder.validate({
				rules: {
					"order_id": "required"
				},
				wrapper: 'em',
				onkeyup: false,
				submitHandler: function (form) {
					$(form).find(":submit").prop("disabled", true);
					return true;
				}
			});
		}
		
		//Recovery email form validation
		var $frmRecoveryTicket = $("#frmRecoveryTicket");
		if ($frmRecoveryTicket.length && validate) {
			$frmRecoveryTicket.validate({
				rules: {
					"ticket_id": "required"
				},
				wrapper: 'em',
				onkeyup: false,
				submitHandler: function (form) {
					$(form).find(":submit").prop("disabled", true);
					return true;
				}
			});
		}
		
		// Custom payment form validation
		var $frmCustomPayment = $("#frmCustomPayment");
		if ($frmCustomPayment.length && validate) {
			$frmCustomPayment.on("change", 'input[name="order[order_type]"]', function () {
				
				switch ($(this).val()) {
				case 'company':
					$frmCustomPayment.find(".boxCompany").show();
					break;
				case 'personal':
					$frmCustomPayment.find(".boxCompany").hide();
					break;
				}
				
			}).on("click", '.btn-submit-checkout', function () {
				var payment_method = $(this).data("payment");
				$frmCustomPayment.find("input[name='order[payment_method]']").val(payment_method);
			}).validate({
				rules: {
					"order[name]": "required",
					"order[email]": {
						required: true,
						email: true
					},
					"order[country_id_iso]": "required",
					"captcha": {
						required: true,
						maxlength: 6,
						remote: "captcha-check/"
					}
				},
				wrapper: 'li',
				errorLabelContainer: $frmCustomPayment.find('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false
			});
		}
		
		// Checkout form validation (checkout.php)
		var $frmCheckout = $("#frmCheckout");
		if ($frmCheckout.length && validate) {
			$frmCheckout.on("change", 'input[name="order[order_type]"]', function () {
				
				switch ($(this).val()) {
				case 'company':
					$frmCheckout.find(".boxCompany").show();
					break;
				case 'personal':
					$frmCheckout.find(".boxCompany").hide();
					break;
				}
				
			}).on("click", '.btn-submit-checkout', function () {
				var payment_method = $(this).data("payment");
				$frmCheckout.find("input[name='order[payment_method]']").val(payment_method);
			}).validate({
				rules: {
					"order[name]": "required",
					"order[email]": {
						required: true,
						email: true
					},
					"order[country_iso]": "required",
					"order[order_type]": "required",
					"order[payment_method]": "required",
					"check[agree]": "required",
					"check[requirements]": "required",
					"check[happy_client]": "required",
					"captcha": {
						required: true,
						maxlength: 6,
						remote: "captcha-check/"
					}
				},
				wrapper: 'li',
				errorLabelContainer: $frmCheckout.find('.formValidation ul'),
				errorContainer: $frmCheckout.find('.formValidation'),
				errorClass: 'formError',
				onkeyup: false,
				invalidHandler: function(event, validator) {
					$(".formValidation").show();
				}
			});
		}
		
		// Promo code form validation (order.php)
		var $frmPromoCode = $("#frmPromoCode");
		if ($frmPromoCode.length && validate) {
			var validator = $frmPromoCode.validate({
				rules: {
					"promo_code": "required"
				},
				errorElement: 'p',
				errorPlacement: function(error, element) {
					error.insertAfter(element.parent());
				},
				invalidHandler: function (event, validator) {
				    if (validator.numberOfInvalids()) {
				    	$(this).closest(".formRowPromo").addClass("formRowPromoError");
				    }
				    return true;
				},
				submitHandler: function (form) {
					var $form = $(form),
						$btn = $form.find(":submit").prop("disabled", true);
					$.post('cart/promo-add/', $form.serialize()).done(function (data) {
						if (data.status) {
							switch (data.status) {
							case 'OK':
								trackEvent.call(null, 'Cart_Promo', 'success', window.location.pathname);
								window.location.reload();
								break;
							case 'ERR':
								trackEvent.call(null, 'Cart_Promo', 'error', window.location.pathname);
								validator.showErrors({promo_code: data.text});
								$form.closest(".formRowPromo").addClass("formRowPromoError");
								break;
							}
						}
					}).always(function () {
						$btn.prop("disabled", false);
					});
					return false;
				}
			});
		}
		
		//Talk to CEO form validation
		var $frmTalkToCeo = $("#frmTalkToCeo");
		if ($frmTalkToCeo.length && validate) {
			$frmTalkToCeo.validate({
				rules: {
					"name": "required",
					"email": {
						required: true,
						email: true
					},
					"question": "required",
					"captcha": {
						required: true,
						maxlength: 6,
						remote: "captcha-check/"
					}
				},
				wrapper: 'li',
				errorLabelContainer: $frmTalkToCeo.find('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false
			});
		}
		
		//New suggestion form validation
		var $frmNewSuggestion = $("#frmNewSuggestion");
		if ($frmNewSuggestion.length && validate) {
			$frmNewSuggestion.on("click change", 'input[name="type"]', function (e) {
				switch ($(this).val()) {
				case 'general':
					$frmNewSuggestion.find(".suggestionProduct").hide().end().find(".suggestionCategory").show();
					break;
				case 'product':
					$frmNewSuggestion.find(".suggestionCategory").hide().end().find(".suggestionProduct").show();
					break;
				}
			}).validate({
				rules: {
					"name": "required",
					"email": {
						required: true,
						email: true
					},
					"category_id": "required",
					"product_id": "required",
					"version": "required",
					"description": "required",
					"captcha": {
						required: true,
						maxlength: 6,
						remote: "captcha-check/"
					}
				},
				wrapper: 'li',
				errorLabelContainer: $frmNewSuggestion.find('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false
			});
		}
		
		//Extended Licence Apply form validation
		var $frmExtendedApply = $("#frmExtendedApply");
		if ($frmExtendedApply.length && validate) {
			$frmExtendedApply.validate({
				rules: {
					"name": "required",
					"email": {
						required: true,
						email: true
					},
					"company": "required",
					"country": "required",
					"address": "required",
					"agreement": "required",
					"captcha": {
						required: true,
						maxlength: 6,
						remote: "captcha-check/"
					}
				},
				wrapper: 'li',
				errorLabelContainer: $frmExtendedApply.find('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false
			});
		}
		
		var $frmForgot = $("#frmForgot");
		if ($frmForgot.length && validate) {
			$frmForgot.validate({
				rules: {
					"email": {
						required: true,
						email: true
					}
				},
				onkeyup: false,
				wrapper: 'em'
			});
		}
		
		var $frmEmail = $("#frmEmail");
		if ($frmEmail.length && validate) {
			$frmEmail.validate({
				rules: {
					"email": {
						required: true,
						email: true
					}
				},
				onkeyup: false,
				wrapper: 'em'
			});
		}
		
		var $frmLogin = $("#frmLogin");
		if ($frmLogin.length && validate) {
			$frmLogin.validate({
				rules: {
					"email": {
						required: true,
						email: true
					},
					"password": "required"
				},
				onkeyup: false,
				wrapper: 'em'
			});
		}
		
		var $frmRegister = $("#frmRegister");
		if ($frmRegister.length && validate) {
			$frmRegister.validate({
				rules: {
					"name": "required",
					"email": {
						required: true,
						email: true
					},
					"password": "required",
					"confirm": {
						required: true,
						equalTo: "#frmRegisterPassword"
					},
					"agree": "required"
				},
				onkeyup: false,
				wrapper: 'em'
			});
		}
		
		var $frmHeaderForgot = $("#frmHeaderForgot");
		if ($frmHeaderForgot.length && validate) {
			$frmHeaderForgot.validate({
				rules: {
					"email": {
						required: true,
						email: true
					}
				},
				onkeyup: false,
				wrapper: 'em',
				submitHandler: function (form) {
					var $form = $(form),
						$btn = $form.find(":button");
					$btn.prop("disabled", true);
					$.post("accounts/password-recovery", $form.serialize()).done(function (data) {
						if (!data.status) {
							return;
						}
						switch (data.status) {
						case 'OK':
							trackEvent.call(null, 'Forgot_Header', 'success', window.location.pathname);
							$frmHeaderForgot.find(".formAlert").removeClass("formAlertDanger").addClass("formAlertSuccess").html(data.text).show();
							$frmHeaderForgot.find("input.field").val("").first().focus();
							break;
						case 'ERR':
							trackEvent.call(null, 'Forgot_Header', 'error', window.location.pathname);
							$frmHeaderForgot.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
							break;
						}
					}).always(function () {
						$btn.prop("disabled", false);
					});
					return false;
				}
			});
		}

		var $frmHeaderLogin = $("#frmHeaderLogin");
		if ($frmHeaderLogin.length && validate) {
			$frmHeaderLogin.validate({
				rules: {
					"email": {
						required: true,
						email: true
					},
					"password": "required"
				},
				onkeyup: false,
				wrapper: 'em',
				submitHandler: function (form) {
					var $form = $(form),
						$btn = $form.find(":button");
					$btn.prop("disabled", true);
					$.post("accounts/login", $form.serialize()).done(function (data) {
						if (!data.status) {
							return;
						}
						switch (data.status) {
						case 'OK':
							trackEvent.call(null, 'Login_Header', 'success', window.location.pathname);
							if (data.redirect) {
								window.location.href = data.redirect;
							} else {
								$frmHeaderLogin.find(".formAlert").removeClass("formAlertDanger").addClass("formAlertSuccess").html(data.text).show();
								$frmHeaderLogin.find("input.field").val("").first().focus();
							}
							break;
						case 'ERR':
							trackEvent.call(null, 'Login_Header', 'error', window.location.pathname);
							$frmHeaderLogin.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
							break;
						}
					}).always(function () {
						$btn.prop("disabled", false);
					});
					return false;
				}
			});
		}

		var $frmHeaderRegister = $("#frmHeaderRegister");
		if ($frmHeaderRegister.length && validate) {
			$frmHeaderRegister.validate({
				rules: {
					"name": "required",
					"email": {
						required: true,
						email: true
					},
					"password": "required",
					"confirm": {
						required: true,
						equalTo: "#frmHeaderRegisterPassword"
					}
				},
				onkeyup: false,
				wrapper: 'em',
				submitHandler: function (form) {
					var $form = $(form),
						$btn = $form.find(":button");
					$btn.prop("disabled", true);
					$.post("accounts/register", $form.serialize()).done(function (data) {
						if (!data.status) {
							return;
						}
						switch (data.status) {
						case 'OK':
							trackEvent.call(null, 'Register_Header', 'success', window.location.pathname);
							$frmHeaderRegister.find(".formAlert").removeClass("formAlertDanger").addClass("formAlertSuccess").html(data.text).show();
							$frmHeaderRegister.find("input.field").val("").first().focus();
							if (data.redirect) {
								window.setInterval(function () {
									window.location.href = data.redirect;
								}, 1500);
							}
							break;
						case 'ERR':
							trackEvent.call(null, 'Register_Header', 'error', window.location.pathname);
							$frmHeaderRegister.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
							break;
						}
					}).always(function () {
						$btn.prop("disabled", false);
					});
					return false;
				}
			});
		}
		
		var $frmHeaderSubscribe = $("#frmHeaderSubscribe");
		if ($frmHeaderSubscribe.length && validate) {
			$frmHeaderSubscribe.validate({
				rules: {
					"name": "required",
					"email": {
						required: true,
						email: true
					}
				},
				onkeyup: false,
				wrapper: 'em',
				submitHandler: function (form) {
					var $form = $(form),
						$btn = $form.find(":button");
					$btn.prop("disabled", true);
					$.post("subscribe/", $form.serialize()).done(function (data) {
						if (!data.status) {
							return;
						}
						switch (data.status) {
						case 'OK':
							trackEvent.call(null, 'Subscribe_Header', 'success', window.location.pathname);
							$frmHeaderSubscribe.find(".formAlert").removeClass("formAlertDanger").addClass("formAlertSuccess").html(data.text).show();
							$frmHeaderSubscribe.find("input.field").val("").first().focus();
							break;
						case 'ERR':
							trackEvent.call(null, 'Subscribe_Header', 'error', window.location.pathname);
							$frmHeaderSubscribe.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
							break;
						}
					}).always(function () {
						$btn.prop("disabled", false);
					});
					return false;
				}
			});
		}
		
		var $frmIndexSubscribe = $("#frmIndexSubscribe");
		if ($frmIndexSubscribe.length && validate) {
			$frmIndexSubscribe.validate({
				rules: {
					"name": "required",
					"email": {
						required: true,
						email: true
					}
				},
				onkeyup: false,
				wrapper: 'em',
				submitHandler: function (form) {
					var $form = $(form),
						$btn = $form.find(":button");
					$btn.prop("disabled", true);
					$.post("subscribe/", $form.serialize()).done(function (data) {
						if (!data.status) {
							return;
						}
						switch (data.status) {
						case 'OK':
							trackEvent.call(null, 'Subscribe_Home', 'success', window.location.pathname);
							$frmIndexSubscribe.find(".formAlert").removeClass("formAlertDanger").addClass("formAlertSuccess").html(data.text).show();
							$frmIndexSubscribe.find("input.field").val("").first().focus();
							break;
						case 'ERR':
							trackEvent.call(null, 'Subscribe_Home', 'error', window.location.pathname);
							$frmIndexSubscribe.find(".formAlert").removeClass("formAlertSuccess").addClass("formAlertDanger").html(data.text).show();
							break;
						}
					}).always(function () {
						$btn.prop("disabled", false);
					});
					return false;
				}
			});
		}
		
		var $frmRateHappy = $("#frmRateHappy");
		if ($frmRateHappy.length && validate) {
			$frmRateHappy.validate({
				rules: {
					"message": "required"
				},
				onkeyup: false,
				wrapper: 'em'
			});
		}
		
		var $frmRateDefault = $("#frmRateDefault");
		if ($frmRateDefault.length && validate) {
			$frmRateDefault.validate({
				rules: {
					"message": "required"
				},
				onkeyup: false,
				wrapper: 'em'
			});
		}
		
		var $frmRateUnhappy = $("#frmRateUnhappy");
		if ($frmRateUnhappy.length && validate) {
			$frmRateUnhappy.validate({
				onkeyup: false,
				wrapper: 'em'
			});
		}
		
		var $frmRateDonation = $("#frmRateDonation");
		if ($frmRateDonation.length && validate) {
			$frmRateDonation.validate({
				submitHandler: function (form) {
					var $form = $(form);
					$form.find(":submit").prop("disabled", true);
					$.post("payments/donation/", $form.serialize()).done(function (data) {
						if (data && data.status) {
							switch (data.status) {
							case "OK":
								$("#frmRateDonationPaypal")
									.find('input[name="custom"]').val(data.id).end()
									.find('input[name="amount"]').val(data.amount).end()
									.trigger("submit");
								break;
							case "ERR":
								$form.find(":submit").prop("disabled", false);
								break;
							}
						}
					}).fail(function () {
						$form.find(":submit").prop("disabled", false);
					});
					return false;
				}
			});
		}
		
		var $frmWriteForUs = $("#frmWriteForUs");
		if ($frmWriteForUs.length && validate) {
			$frmWriteForUs.on('change', 'input[type="file"]', function () {
				var name;
				if ('files' in this && this.files.length) {
					name = this.files[0].name;
				} else {
					name = this.value.split(/(\\|\/)/g).pop();
				}
				$(this).closest('.fileUpload').find('.fieldUploadedFile').val(name);
			}).validate({
				rules: {
					name: "required",
					email: {
						required: true,
						email: true
					},
					url: {
						url: true
					},
					captcha: {
						required: true,
						maxlength: 6,
						remote: "captcha-check/"
					}
				},
				wrapper: 'li',
				errorLabelContainer: $frmWriteForUs.find('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false
			});
		}
		
		var $frmTicket = $("#frmTicket");
		if ($frmTicket.length && validate) {
			$frmTicket.validate({
				rules: {
					"message": "required"
				},
				onkeyup: false,
				wrapper: 'em'
			});
		}
		
		$("#btn-reopen").on("click", function() {
			var $this = $(this).prop("disabled", true);
			
			$.post("account/ticket-reopen/", {
				uuid: $this.data("uuid")
			}).done(function(data) {
				if (data && data.status && data.status === "OK") {
					window.location.reload(true);
				}
			}).always(function() {
				$this.prop("disabled", false);
			});
		});
		
		var $frmTicketCreate1 = $("#frmTicketCreate1");
		if ($frmTicketCreate1.length && validate) {
			$frmTicketCreate1.validate({
				rules: {
					"type": "required",
					"product_id": "required",
					"question": "required"
				},
				wrapper: 'li',
				errorLabelContainer: $frmTicketCreate1.find('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false,
				submitHandler: function (form) {
					
					$(form).find(":submit")
						.prop("disabled", true)
						.append('<i class="ico icoSpin"></i>');
					
					return true;	
				}
			});
		}
		
		var $frmTicketCreate2 = $("#frmTicketCreate2");
		if ($frmTicketCreate2.length && validate) {
			$frmTicketCreate2.on("change", "#pid", function () {
				
				var $option = $(this).find("option:selected"),
					product_id = $option.val(),
					$notice = $("#box-licence-notice").addClass("d-none"),
					$notice_2 = $("#box-licence-notice-2").addClass("d-none"),
					$notice_3 = $("#box-licence-notice-3").addClass("d-none"),
					$tickets = $notice_3.find(".box-tickets").addClass("d-none"),
					$box = $frmTicketCreate2.find(".aTech").addClass("d-none"),
					$btn = $frmTicketCreate2.find(":submit").prop("disabled", true);
				
				if (!product_id) {
					return;
				}
				
				var ticket  = $option.data("ticket"),
					support = $option.data("support"),
					expired = $option.data("sdate").length;
				
				if (support) {
					if (ticket) {
						
						$tickets.filter("#box-tickets-" + product_id).removeClass("d-none");
						
						$notice_3
							.find("#slot-product-name-3").html($option.html()).end()
							.removeClass("d-none");
					} else {
						$box.removeClass("d-none");
						$btn.prop("disabled", false);
					}
				} else {
					if (expired) {
						$notice
							.find("#slot-product-name").html($option.html()).end()
							.find("#slot-date").html($option.data("odate")).end()
							.find("#slot-payment").attr("href", $option.data("url")).end()
							.removeClass("d-none");
					} else {
						$notice_2
							.find("#slot-product-name").html($option.html()).end()
							.find("#slot-payment").attr("href", $option.data("url")).end()
							.removeClass("d-none");
					}
				}
				
			}).on("click", "#btn-start-new-ticket", function(e) {
				e.preventDefault();
				
				$frmTicketCreate2.find("#box-licence-notice-3").addClass("d-none");
				$frmTicketCreate2.find(".aTech").removeClass("d-none");
				$frmTicketCreate2.find(":submit").prop("disabled", false);
				
			}).validate({
				rules: {
					"type": "required",
					"product_id": "required",
					"question": "required"
				},
				wrapper: 'li',
				errorLabelContainer: $frmTicketCreate2.find('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false,
				submitHandler: function (form) {
					
					$(form).find(":submit")
						.prop("disabled", true)
						.append('<i class="ico icoSpin"></i>');
					
					return true;	
				}
			});
		}
		
		var $frmTicketCreate3 = $("#frmTicketCreate3");
		if ($frmTicketCreate3.length && validate) {
			$frmTicketCreate3.validate({
				rules: {
					"type": "required",
					"question": "required"
				},
				wrapper: 'li',
				errorLabelContainer: $frmTicketCreate3.find('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false,
				submitHandler: function (form) {
					
					$(form).find(":submit")
						.prop("disabled", true)
						.append('<i class="ico icoSpin"></i>');
					
					return true;	
				}
			});
		}
		
		var $frmTicketEdit = $("#frmTicketEdit");
		$('.selectorTitleEdit').on('click', function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			$("#selectorTitle").hide();
			$frmTicketEdit.show();
			return false;
		});
		if ($frmTicketEdit.length && validate) {
			$frmTicketEdit.on('click', '.ticketEditCancel', function(e) {
				if (e && e.preventDefault) {
					e.preventDefault();
				}
				$("#selectorTitle").show();
				$frmTicketEdit.hide();
				return false;
			}).validate({
				rules: {
					"title": "required"
				},
				onkeyup: false,
				wrapper: 'em'
			});
		}
		
		//For buttons that scrolls the page to some section. The link should have class 'btnGoTo' and destination section name inside the href attribute.
		if ($('.btnGoTo').length) {
			$('.btnGoTo').on('click', function(e) {
				var m = $(this).attr('href').match(/#.+$/);
				if (m !== null) {
					trackHashLinks.call(null, m[0]);
					var $wayPoint = $(m[0]).offset().top - ($('.pageTop').outerHeight());

					$('html, body').animate({
						scrollTop: $wayPoint
					}, 1000);
				}
				e.preventDefault();
			});
		};

		//This is for tabs functionality(at pages index.php, contact-us.php and the forms inside login button). From the navigation you can show hide tabs(add/remove class current). The tab id for show is in the href attribute of every link. 
		if ($('.tabs').length) {
			var $tabsLis = $('.tabsNav li');
			var $tabs = '.tab';
			var activeTabClass = 'current';

			$('.tabsNav').on('click', 'a', function(e){
				var $clickedLink = $(this);
				if (!$clickedLink.hasClass('tabDisabled')) {
					var $clickedLinkParent = $clickedLink.parent();
					var href = $clickedLink.attr('href');
					var $clickedLinkMainParent = $clickedLink.parents('.tabs');

					if (!$clickedLinkParent.hasClass(activeTabClass)) {
						$clickedLinkParent
							.addClass(activeTabClass)
							.attr("aria-selected", true)
							.attr("aria-expanded", true)
							.attr("tabindex", 0)
							.siblings()
								.removeClass(activeTabClass)
								.attr("aria-selected", false)
								.attr("aria-expanded", false)
								.attr("tabindex", -1);

						$clickedLinkMainParent.find($tabs)
							.removeClass(activeTabClass)
							.attr("aria-hidden", true);
						$clickedLinkMainParent.find($tabs).filter(href)
							.addClass(activeTabClass)
							.attr("aria-hidden", false)
							.find(".formAlert").hide().html("");
						
						
						switch ($clickedLink.attr("href")) {
						case '#accessTabSignIn':
							trackEvent.call(null, 'Login_Header', 'open', window.location.pathname);
							break;
						case '#accessTabSignUp':
							trackEvent.call(null, 'Register_Header', 'open', window.location.pathname);
							break;
						case '#accessTabForgotPassword':
							trackEvent.call(null, 'Forgot_Header', 'open', window.location.pathname);
							break;
						case '#accessTabSubscribe':
							trackEvent.call(null, 'Subscribe_Header', 'open', window.location.pathname);
							break;
						}
					}
					
					if (($clickedLinkParent.parents('.sectionAccess').length) && ($win.width() < 570)) {
						var $wayPoint = $clickedLink.attr('href');
						$('html, body').animate({
							scrollTop: $($wayPoint).offset().top
						}), 3000;
					};

					e.preventDefault();					
				};
			});
			
			// Contact form
			$('.tabsNavX').on('click', 'a', function (e) {
				if (e && e.preventDefault) {
					e.preventDefault();
				}
				var $this = $(this),
					$type = $(".formContact form").find('input[name="type"]');
				
				$this.parent().addClass('current').siblings('li').removeClass('current');
				
				switch (Number($this.data("type"))) {
				case 1:
					$(".aOther").show();
					$(".aQuote, .aTechnical").hide();
					$(".ulContact2, .ulContact3").hide();
					$(".ulContact1").show();
					$type.val(1);
					break;
				case 2:
					$(".aOther, .aTechnical").show();
					$(".aQuote").hide();
					$(".ulContact1, .ulContact3").hide();
					$(".ulContact2").show();
					$type.val(2);
					break;
				case 3:
					$(".aOther, .aTechnical").hide();
					$(".aQuote").show();
					$(".ulContact1, .ulContact2").hide();
					$(".ulContact3").show();
					$type.val(3);
					break;
				}
				return false;
			});
			
			// New Ticket
			$('.tabsNavTicket').on('click', 'a', function (e) {
				if (e && e.preventDefault) {
					e.preventDefault();
				}
				var $this = $(this);
				
				var $panels = $('.tabsBody .tab[role="tabpanel"]')
					.removeClass("current")
					.attr("aria-hidden", true)
					.attr("aria-expanded", false);
				
				var $tab = $this.closest("li");
				
				var id = $tab.attr("aria-controls");
				
				var $panel = $panels.filter('[id="' + id + '"]')
					.addClass("current")
					.attr("aria-hidden", false)
					.attr("aria-expanded", true);
				
				$tab
					.addClass('current')
					.attr("aria-selected", true)
					.attr("aria-hidden", false)
					.siblings('li')
						.removeClass('current')
						.attr("aria-selected", false)
						.attr("aria-hidden", true);
			});
		}
		
		$classicTabs = $(".classicTabs");
		if ($classicTabs.length) {
			var $tabs = $classicTabs.find('[role="tab"]');
			var $panels = $classicTabs.find('[role="tabpanel"]');
			$classicTabs.on("click", '[role="tab"]', function (e) {
				e.preventDefault();
				$tabs.attr("tabindex", "-1").attr("aria-selected", "false").attr("aria-expanded", "false").removeClass("current");
				$panels.hide().attr("aria-hidden", "true");
				var $tab = $(this);
				$tab.attr("tabindex", "0").attr("aria-selected", "true").attr("aria-expanded", "true").addClass("current");
				$("#" + $tab.attr("aria-controls")).attr("aria-hidden", "false").show();
			});
		}
		
		//For sliders: slider testimonials(page script-home.php section Testimonials, we have this slider on home page too) and slider intro(page script-home.php first section with title "car rental script", we have this slider on home page and script-marketplace.php page too)
		if ($('.sliderFadeWithPagination').length) {
			$('.sliderFadeWithPagination .slides').carouFredSel({
				responsive: true,
				items: 1,
				scroll: {
					pauseOnHover: true,
					fx: 'crossfade',
					duration: 1000
				},
				pagination: {
					container: function(){
						return $(this).parents('.slider').find('.sliderPagination');
					}
				}
			});
		};
		
		function sliderSwipe(selector, $context) {
			var $el;
			
			if ($context) {
				$el = $context.find(selector);
			} else {
				$el = $(selector);
			}

			if (!$el.length) {
				return;
			}
			
			$el.swipe({
				excludedElements: 'button, input, select, textarea, .noSwipe',
				swipeLeft: function() {
					$(this).trigger('next', 1);
				},
				swipeRight: function() {
					$(this).trigger('prev', 1);
				}
			});
		}
		
		function sliderFade(selector, $context) {
			var $el;
			
			if ($context) {
				$el = $context.find(selector);
			} else {
				$el = $(selector);
			}
			
			if (!$el.length) {
				return;
			}
			
			$el.carouFredSel({
				responsive: true,
				auto: false,
				items: 1,
				scroll: {
					pauseOnHover: true,
					fx: 'crossfade',
					duration: 1000
				},
				prev: {
					button: function(){
						return $(this).parents('.slider').find('.sliderPrev');
					}
				},
				next: {
					button: function(){
						return $(this).parents('.slider').find('.sliderNext');
					}
				}
			});
		}
		
		if ($('.sliderTestimonials').length) {
			sliderFade.call(null, '.sliderTestimonials .slides');
		};

		//On pages script-home.php, my-account.php for section "latest news & blog posts"
		if ($('.sliderPosts').length) {
			$('.sliderPosts .slides').carouFredSel({
				auto: false,
				items: 1,
				responsive: true,
				scroll: {
					pauseOnHover: true,
					duration: 1000
				},
				prev: {
					button: function(){
						return $(this).parents('.slider').find('.sliderPrev');
					}
				},
				next: {
					button: function(){
						return $(this).parents('.slider').find('.sliderNext');
					}
				}
			});
		};

		//Next two sliders are full parent width and every element has fixed width in pixels. When you resize the window the amount of slides shown depends on, for how many do you have place in the parent width
		//This one is for section "similar scripts" on page script-home.php. Section "commercial PHP scripts" on page free-scripts-details.php. Section "more car rental web templates" on page templates-details.php. And all other pages with this sections included
		
		function sliderFixedElementWidth(selector, $context, options) {
			var $el;

			if ($context) {
				$el = $context.find(selector);
			} else {
				$el = $(selector);
			}
			
			if (!$el.length) {
				return;
			}
			
			var defaults = {
				width: '100%',
				items: {
					visible: 'variable',
					width: 323,
				},
				scroll: {
					items: 1,
					pauseOnHover: true,
					duration: 1000
				},
				prev: {
					button: function(){
						return $(this).parents('.slider').find('.sliderPrev');
					}
				},
				next: {
					button: function(){
						return $(this).parents('.slider').find('.sliderNext');
					}
				}
			};
			
			var settings;
			if (options) {
				settings = $.extend({}, defaults, options);
			} else {
				settings = defaults;
			}
			
			$el.carouFredSel(settings);
		}
		
		var $sliderScriptsAlt = $('.sliderScriptsAlt');
		if ($sliderScriptsAlt.length) {
			if ($sliderScriptsAlt.hasClass('sliderScriptsAltManual')) {
				sliderFixedElementWidth.call(null, '.sliderScriptsAlt .slides', null, {auto: false});
			} else {
				sliderFixedElementWidth.call(null, '.sliderScriptsAlt .slides');
			}
		};

		//This one is for section "from our blog" on the home page
		if ($('.sliderBlogExcerpts').length) {
			$('.sliderBlogExcerpts .slides').carouFredSel({
				width: '100%',
				items: {
					visible: 'variable',
					width: 390,
				},
				scroll: {
					items: 1,
					pauseOnHover: true,
					duration: 1000
				},
				prev: {
					button: function(){
						return $(this).parents('.slider').find('.sliderPrev');
					}
				},
				next: {
					button: function(){
						return $(this).parents('.slider').find('.sliderNext');
					}
				}
			});
		};

		//This one is for the slider in section "Car Rental Template" on page templates-details.php and section "sliding contact form" on page free-scripts-details.php. 
		//One slider connected with thumbs slider under it. The src attribute of each main slider image is copied for and inserted to the thumbs. When there is only one slide in the main slider the thumbs slider is disabled
		if ($('.sliderWithThumbs').length) {
			fnDoSliderWithThumbs();
		};

		//For sliders in section "product highlights" on page script-marketplace.php and same sliders on page features.php
		//This slider works like slider thumbs but here we have slider nav aside of the slider. On start every link in the navigation and every slide are receiving data-index attribute with number and the navigation works on base of this data-index so we can put freely lines amongst slider navigation without they interfere with the slider. 
		if ($('.sliderFeatured').length) {
			var $slider = $('.sliderFeatured .slides');
			var $thumbs = $('.sliderFeaturedNav .sliderFeaturedThumbs');
			fnDoSliderFeatured($slider, $thumbs);
		};

		//For the main slider on top of the home page 
		//For every slide we have data-title attribute set in HTML. When the slider starts the text in this attr is included into pagination. So on hover on pagination bullet this text appears on top of the bullet. 
		//We can make this with normal title attribute but I'm not sure which of this two options is better for SEO
		if ($('.sliderHome').length) {
			$('.sliderHome .slides').carouFredSel({
				responsive: true,
				items: 1,
				scroll: {
					fx: 'crossfade',
					pauseOnHover: true,
					duration: 1000
				},
				pagination: {
					container: function(){
						return $(this).parents('.slider').find('.sliderPagination ul');
					},
					anchorBuilder: false
				},
				onCreate: function() {
					$(this).children().each(function() {
						var $currentSlide = $(this);
						var $currentSlideTitle = $currentSlide.data('title');

						$currentSlide.parents('.slider').find('.sliderPagination ul').append('<li><a href="#"><span>' + $currentSlideTitle + '</span></a></li>');
					});
				}
			});

			//For better images appearance
			if (fullscreener) {
				$('.sliderHome .slideImage img').fullscreener();
			}
		};
		
		if ($('.sliderPartnerships').length) {
			$('.sliderPartnerships .slides').carouFredSel({
				responsive: true,
				items: 1,
				scroll: {
					fx: 'crossfade',
					pauseOnHover: true,
					duration: 1000
				},
				prev: {
					button: function(){
						return $(this).parents('.slider').find('.sliderPrev');
					}
				},
				next: {
					button: function(){
						return $(this).parents('.slider').find('.sliderNext');
					}
				}
			});
		};

		//For section "latest news" on home page
		if ($('.sliderNews').length) {
			$('.sliderNews .slides').carouFredSel({
				auto: false,
				responsive: true,
				items: 1,
				scroll: {
					fx: 'crossfade',
					pauseOnHover: true,
					duration: 1000
				},
				prev: {
					button: function(){
						return $(this).parents('.slider').find('.sliderPrev');
					}
				},
				next: {
					button: function(){
						return $(this).parents('.slider').find('.sliderNext');
					}
				}
			});
		};
		
		//our-clients.php, Video testimonials
		if ($('.sliderVideoTestimonials').length) {
			$('.sliderVideoTestimonials .slides').carouFredSel({
				auto: {play:false},
				responsive: true,
				items: 2,
				scroll: {
					items: 1,
					pauseOnHover: true,
					duration: 1000
				},
				prev: {
					button: function(){
						return $(this).parents('.slider').find('.sliderPrev');
					}
				},
				next: {
					button: function(){
						return $(this).parents('.slider').find('.sliderNext');
					}
				}
			});
		};

		if ($('.sliderClients').length) {
			$('.sliderClients .slides').carouFredSel({
				responsive: true,
				items: 1,
				scroll: {
					pauseOnHover: true,
					duration: 1000
				},
				prev: {
					button: function(){
						return $(this).parents('.slider').find('.sliderPrev');
					}
				},
				next: {
					button: function(){
						return $(this).parents('.slider').find('.sliderNext');
					}
				}
			});
		};

		//For Button Generator
		if ($('.sectionToolButtonGenerator').length) {
			var $sliderStatus;

			//Fix button preview
			var $btnGeneratorSectionHead = $('.sectionToolButtonGenerator').find('.sectionHead');
			var $btnGeneratorSectionHeadInitialOffset = $btnGeneratorSectionHead.offset().top;
			var btnGeneratorSectionHeadFixedClass = 'sectionHeadFixed';
			$win.on('load scroll', function() {
				if ((($win.scrollTop()) > ($btnGeneratorSectionHeadInitialOffset - 160)) && ($win.width() > 768)) {
					$btnGeneratorSectionHead.addClass(btnGeneratorSectionHeadFixedClass);
					//console.log('win top ' + $win.scrollTop());
					//console.log('section head top ' + $btnGeneratorSectionHead.offset().top);
				} else {
					$btnGeneratorSectionHead.removeClass(btnGeneratorSectionHeadFixedClass);
					//console.log('win top ' + $win.scrollTop());
					//console.log('section head top ' + $btnGeneratorSectionHead.offset().top);
				};
			});
			
			//Change background color of the preview button area
			$('.sectionToolButtonGenerator .sectionHeadActions').on('click', 'a', function(e) {
				var $clickedLink = $(this);
				var $chosenBackgroundColor = $clickedLink.attr('data-backgroundcolor');
				$clickedLink.parents('.sectionHead').css('background-color', '#' + $chosenBackgroundColor);

				e.preventDefault();
			});

			//Activate/deactivate btn settings
			$('.btnSettingAside .checkbox input').on('change', function(e) {
				var $currentCheckbox = $(this);
				var $currentBtnSetting = $currentCheckbox.parents('.btnSetting');
				var $currentOptions = $currentBtnSetting.find('.btnSettingInner input, .btnSettingInner select');
				var $currentInnerCheckbox = $currentBtnSetting.find($('.btnSettingInnerGroup .checkbox input'));
				if (!$currentCheckbox.prop('checked')) {
					$sliderStatus = true;
					$currentBtnSetting.addClass('btnSettingInactive');
					$currentOptions.prop('disabled', true);
				} else {
					$sliderStatus = false;
					$currentBtnSetting.removeClass('btnSettingInactive');
					$currentOptions.prop('disabled', false);

					if (($currentInnerCheckbox.length) && (!$currentInnerCheckbox.prop('checked'))) {
						$currentInnerCheckbox.parent().siblings('input').prop('disabled', true);
						$currentInnerCheckbox.parent().siblings('.select').find('select').prop('disabled', true);
					};
				};

				$currentBtnSetting.find('.sliderWithSelect').slider('option', 'disabled', $sliderStatus);
			});

			if ($('.btnSettingInnerGroup .checkbox').length) {
				$('.btnSettingInnerGroup .checkbox input').on('change', function(e) {
					if (!$(this).prop('checked')) {
						$(this).parent().siblings('input').prop('disabled', true);
						$(this).parent().siblings('.select').find('select').prop('disabled', true);
					} else {
						$(this).parent().siblings('input').prop('disabled', false);
						$(this).parent().siblings('.select').find('select').prop('disabled', false);
					};
				});
			};

			//jQuery UI slider connected with select field
			$('.selectWithSlider select').each(function() {
				var $select = $(this);
				var $selectWrapper = $select.parents('.btnSetting');
				var $minValue = $select.find('option:first-of-type').text();
				var $maxValue = $select.find('option:last-of-type').text();
				if ($selectWrapper.hasClass('btnSettingInactive')) {
					$sliderStatus = true;
					$select.prop('disabled', true);
				} else {
					$sliderStatus = false;
				};
				var $slider = $select.parents('.sliderWrapper').find('.sliderWithSelect').slider({
					disabled: $sliderStatus,
					min: parseInt($minValue, 10),
					max: parseInt($maxValue, 10),
					range: 'min',
					value: $select.find("option:selected").text(),
					slide: function(event, ui) {
						$select.find("option").filter(function () {
							return $(this).text() == ui.value;
						}).prop("selected", true);
					}
				});
				$select.change(function() {
					$slider.slider('value', this.options[this.selectedIndex].text);
				});				
			});

			//Color picker field connected with the closest input to show the chosen color
			$('.fieldColorPicker').on('change', function(e) {
				var $currentColorPicker = $(this);
				var $currentColor = $currentColorPicker.val();
				$currentColorPicker.siblings('.fieldColorReceiver').val($currentColor);
			});
			
			function formToText() {
				
				var i, iCnt, m, b, c, re, property,
					btn = {},
					check = {},
					normal = [],
					hover = [],
					$container = $(".accordions.accordionsBoxes"),
					$inputs = $container.find(":input"),
					data = $inputs.serializeArray();
				
				for (i = 0, iCnt = data.length; i < iCnt; i += 1) {
					m = data[i].name.match(/^btn\[(.*)\]$/);
					if (m !== null) {
						btn[m[1]] = data[i].value;
					}
					
					m = data[i].name.match(/^check\[(.*)\]$/);
					if (m !== null) {
						check[m[1]] = data[i].value;
					}
				}
				
				for (c in check) {
					if (check.hasOwnProperty(c)) {
						for (b in btn) {
							if (btn.hasOwnProperty(b)) {
								if (c == 'box-shadow' || c == 'text-shadow' || c == 'gradient' || c == 'hover-gradient') {
									continue;
								}
								
								re = new RegExp("^" + c + "-?.*$")
								m = b.match(re);
								if (m === null) {
									continue;
								}
								
								m = b.match(/^hover-(.*)$/);
								if (m === null) {
									property = b;

									normal.push([b, btn[b]].join(": "));
								} else {
									property = m[1];
									
									hover.push([m[1], btn[b]].join(": "));
								}
							}
						}
						
						switch (c) {
						case 'gradient':
							var gradient, cs1 = "", cs2 = "";
							if ('gradient-stop-color' in btn && 'gradient-stop' in check) {
								cs1 = [btn['gradient-stop-color'], ' 50%, '].join('');
								cs2 = ['color-stop(50%, ', btn['gradient-stop-color'], '), '].join('');
							}
							gradient = ['background: linear-gradient(to bottom, ', btn['gradient-top-color'], ' 0%, ', cs1, btn['gradient-bottom-color'], ' 100%)'].join('');
							normal.push( gradient.replace('background: linear-gradient(to bottom', 'background: -moz-linear-gradient(top') );
							normal.push( ['background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, ', btn['gradient-top-color'], '), ', cs2, 'color-stop(100%, ', btn['gradient-bottom-color'], '))'].join('') );
							normal.push( gradient.replace('background: linear-gradient(to bottom', 'background: -webkit-linear-gradient(top') );
							normal.push( gradient.replace('background: linear-gradient(to bottom', 'background: -o-linear-gradient(top') );
							normal.push( gradient.replace('background: linear-gradient(to bottom', 'background: -ms-linear-gradient(top') );
							normal.push( gradient );
							normal.push( ["filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='", btn['gradient-top-color'], "', endColorstr='", btn['gradient-bottom-color'], "', GradientType=0)"].join('') );
							break;
						case 'hover-gradient':
							var gradient, cs1 = "", cs2 = "";
							if ('hover-gradient-stop-color' in btn && 'hover-gradient-stop' in check) {
								cs1 = [btn['hover-gradient-stop-color'], ' 50%, '].join('');
								cs2 = ['color-stop(50%, ', btn['hover-gradient-stop-color'], '), '].join('');
							}
							gradient = ['background: linear-gradient(to bottom, ', btn['hover-gradient-top-color'], ' 0%, ', cs1, btn['hover-gradient-bottom-color'], ' 100%)'].join('');
							hover.push( gradient.replace('background: linear-gradient(to bottom', 'background: -moz-linear-gradient(top') );
							hover.push( ['background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, ', btn['hover-gradient-top-color'], '), ', cs2, 'color-stop(100%, ', btn['hover-gradient-bottom-color'], '))'].join('') );
							hover.push( gradient.replace('background: linear-gradient(to bottom', 'background: -webkit-linear-gradient(top') );
							hover.push( gradient.replace('background: linear-gradient(to bottom', 'background: -o-linear-gradient(top') );
							hover.push( gradient.replace('background: linear-gradient(to bottom', 'background: -ms-linear-gradient(top') );
							hover.push( gradient );
							hover.push( ["filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='", btn['hover-gradient-top-color'], "', endColorstr='", btn['hover-gradient-bottom-color'], "', GradientType=0)"].join('') );
							break;
						case 'text-shadow':
							normal.push( ['text-shadow:', btn['text-shadow-x'], btn['text-shadow-y'], btn['text-shadow-blur'], btn['text-shadow-color']].join(' ') );
							break;
						case 'box-shadow':
							var box_shadow = ['box-shadow:', btn['box-shadow-inset'], btn['box-shadow-x'], btn['box-shadow-y'], btn['box-shadow-blur'], btn['box-shadow-spread'], btn['box-shadow-color']].join(' ')
							normal.push( '-moz-' + box_shadow );
							normal.push( '-webkit-' + box_shadow );
							normal.push( box_shadow );
							break;
						}
					}
				}
				
				normal = normal.join(';\n\t');
				hover = hover.join(';\n\t');
				
				var normal_wrap = normal.length ? ['.btn {\n\t', normal, ';\n}'].join('') : '';
				var hover_wrap = hover.length ? ['.btn:hover {\n\t', hover, ';\n}'].join('') : '';
				var active_wrap = '.btn:active {\n\ttop: 1px;\n}'
				
				return [normal_wrap, hover_wrap, active_wrap].join('\n');
			}
			
			function objectToText(obj) {
				var selector, key, rules, css = [];
				for (selector in obj) {
					if (obj.hasOwnProperty(selector)) {
						rules = [];
						for (key in obj[selector]) {
							if (obj[selector].hasOwnProperty(key)) {
								rules.push( [key, ': ', obj[selector][key], ';'].join('') ); 
							}
						}
						if (rules.length) {
							css.push( ['.btn', selector, ' {\n\t'].join('') );
							css.push( rules.join("\n\t") );
							css.push('\n}\n');
						}
					}
				}
				
				return css.join('');
			}
			
			function objectToForm(obj) {
				var selector, rule, $field, m, prefix;
				
				$('input[name^="check["]').prop("checked", false);
				$(':input[name^="btn["]').prop("disabled", true);
				$('li.btnSetting').addClass('btnSettingInactive');
				$('#btnName').closest('li.btnSetting').removeClass('btnSettingInactive');
				$('.sliderWithSelect').slider('disable');
				
				for (selector in obj) {
					if (obj.hasOwnProperty(selector)) {
						for (rule in obj[selector]) {
							if (obj[selector].hasOwnProperty(rule)) {
								if (selector === '') {
									$field = $([':input[name="btn[', rule, ']"]'].join(''));
								} else {
									$field = $([':input[name="btn[', selector.replace(/^\:/, ''), '-', rule, ']"]'].join(''));
								}
							
								switch (rule) {
								case 'background-image':
									prefix = '';
									if (selector !== '') {
										prefix = selector.replace(':', '') + '-';
									}
										
									$field = $([':input[name="btn[', prefix, 'gradient-top-color]"]'].join('')).prop("disabled", false);
									m = obj[selector][rule].match(/(#[a-zA-Z\d]{3,6}) 0%/);
									if (m !== null) {
										$field.val(m[1]);
										$field.siblings('input[type="color"]').val(m[1]);
									}
									
									$field = $([':input[name="btn[', prefix, 'gradient-stop-color]"]'].join('')).prop("disabled", false);
									m = obj[selector][rule].match(/(#[a-zA-Z\d]{3,6}) 50%/);
									if (m !== null) {
										$field.val(m[1]);
										$field.siblings('input[type="color"]').val(m[1]);
										$field.closest('.btnSettingInnerGroup').find('input[name^="check["]').prop("checked", true);
									}
									
									$field = $([':input[name="btn[', prefix, 'gradient-bottom-color]"]'].join('')).prop("disabled", false);
									m = obj[selector][rule].match(/(#[a-zA-Z\d]{3,6}) 100%/);
									if (m !== null) {
										$field.val(m[1]);
										$field.siblings('input[type="color"]').val(m[1]);
									}
									
									$field.closest('li.btnSetting')
										.removeClass('btnSettingInactive')
										.find('input[name^="check["]:first')
										.prop("checked", true);
									
									continue;
									break;
								case 'text-shadow':
									
									$field = $(':input[name="btn[text-shadow-color]"]').prop("disabled", false);
									m = obj[selector][rule].match(/(\-?\d+px)\s+(\-?\d+px)\s+(\-?\d+px)\s+(#[a-zA-Z\d]{3,6})/);
									if (m !== null) {
										$field.val(m[4]);
										$field.siblings('input[type="color"]').val(m[4]).prop("disabled", false);
										
										$field = $(':input[name="btn[text-shadow-x]"]').prop("disabled", false);
										$field.find(['option[value="', m[1], '"]'].join('')).prop("selected", true);
										$field.closest('.btnSettingInnerGroup').find('.sliderWithSelect').slider('enable').slider('value', m[1].replace(/px/, ''));
										
										$field = $(':input[name="btn[text-shadow-y]"]').prop("disabled", false);
										$field.find(['option[value="', m[2], '"]'].join('')).prop("selected", true);
										$field.closest('.btnSettingInnerGroup').find('.sliderWithSelect').slider('enable').slider('value', m[2].replace(/px/, ''));
										
										$field = $(':input[name="btn[text-shadow-blur]"]').prop("disabled", false);
										$field.find(['option[value="', m[3], '"]'].join('')).prop("selected", true);
										$field.closest('.btnSettingInnerGroup').find('.sliderWithSelect').slider('enable').slider('value', m[3].replace(/px/, ''));
										
										$field.closest('li.btnSetting')
											.removeClass('btnSettingInactive')
											.find('input[name^="check["]:first')
											.prop("checked", true);
									}
									
									continue;
									break;
								case 'box-shadow':
									
									$field = $(':input[name="btn[box-shadow-color]"]').prop("disabled", false);
									m = obj[selector][rule].match(/(#[a-zA-Z\d]{3,6})\s+(\-?\d+px)\s+(\-?\d+px)\s+(\-?\d+px)\s+(\-?\d+px)(\s+inset)?/);
									if (m !== null) {
										$field.val(m[1]);
										$field.siblings('input[type="color"]').val(m[4]).prop("disabled", false);
										
										$field = $(':input[name="btn[box-shadow-x]"]').prop("disabled", false);
										$field.find(['option[value="', m[2], '"]'].join('')).prop("selected", true);
										$field.closest('.btnSettingInnerGroup').find('.sliderWithSelect').slider('enable').slider('value', m[2].replace(/px/, ''));
										
										$field = $(':input[name="btn[box-shadow-y]"]').prop("disabled", false);
										$field.find(['option[value="', m[3], '"]'].join('')).prop("selected", true);
										$field.closest('.btnSettingInnerGroup').find('.sliderWithSelect').slider('enable').slider('value', m[3].replace(/px/, ''));
										
										$field = $(':input[name="btn[box-shadow-blur]"]').prop("disabled", false);
										$field.find(['option[value="', m[4], '"]'].join('')).prop("selected", true);
										$field.closest('.btnSettingInnerGroup').find('.sliderWithSelect').slider('enable').slider('value', m[4].replace(/px/, ''));
										
										$field = $(':input[name="btn[box-shadow-spread]"]').prop("disabled", false);
										$field.find(['option[value="', m[5], '"]'].join('')).prop("selected", true);
										$field.closest('.btnSettingInnerGroup').find('.sliderWithSelect').slider('enable').slider('value', m[5].replace(/px/, ''));
										
										$field = $(':input[name="btn[box-shadow-inset]"]').prop("disabled", false);
										if (m[6]) {
											$field.find(['option[value="inset"]'].join('')).prop("selected", true);
										}
										
										$field.closest('li.btnSetting')
											.removeClass('btnSettingInactive')
											.find('input[name^="check["]:first')
											.prop("checked", true);
									}
									
									continue;
									break;
								}
							
								if ($field.length) {
									switch ($field.get(0).nodeName) {
									case 'INPUT':
										$field.val(obj[selector][rule]);
										break;
									case 'SELECT':
										$field.find(['option[value="', obj[selector][rule], '"]'].join('')).prop("selected", true);
										$field.closest('.btnSetting').find('.sliderWithSelect').slider('enable').slider('value', obj[selector][rule].replace(/px|ms/, ''));
										break;
									}
									$field.prop("disabled", false)
										.closest('li.btnSetting')
											.removeClass('btnSettingInactive')
											.find('input[name^="check["]')
											.prop("checked", true);
									
									switch (rule) {
									case 'background-color':
									case 'border-color':
									case 'color':
										$field.siblings('input[type="color"]').val(obj[selector][rule]);
										break;
									}
								}
							}
						}
					}
				}
			}
			
			$doc.on("change", ':input[name^="btn["], :input[name^="check["]', function (e) {
				var cssText = formToText.call(null);
				
				$("#btnCustomStyle").html(cssText.replace('.btn', '.btnPreview .btn'));
				
				$(".btnCodeResult").html(cssText);
				$(".btnPreview button").removeClass().addClass('btn');
			}).on("click", ".btnTemplates button", function (e) {
				var rel = $(this).data("rel");
				if (rel in btns) {
					var cssText = objectToText(btns[rel]);
					
					objectToForm(btns[rel]);
					
					$(".btnCodeResult").html(cssText);
					$(".btnPreview button").removeClass().addClass(rel);
				}
			}).on("keyup", "#btnName", function () {
				var text = $(this).val();
				if (text.length) {
					$(".btnPreview button").text(text);
				} else {
					$(".btnPreview button").text('Demo button');
				}
			}).on("click", "#copy-button", function (e) {
				if (e && e.preventDefault) {
					e.preventDefault();
				}
				return false;
			});
			
			var client = new ZeroClipboard(document.getElementById("copy-button"));
			client.on("ready", function (readyEvent) {
				client.on("aftercopy", function (event) {
					// `this` === `client`
					// `event.target` === the element that was clicked
					//event.target.style.display = "none";
					//alert("Copied text to clipboard: " + event.data["text/plain"] );
				});
			});
		};

		//For tables where first column is full height like .tableSpanned on page my-orders.php. 
		if ($('.tableSpanned').length) {
			$('.tableSpanned').each(function() {
				var $currentTable = $(this);
				var $tableRows = $currentTable.find('tr').length;
				$currentTable.find('th:first-of-type').attr('rowspan', $tableRows);
			});
		};

		var getAccountUploads = function(hash) {
			$.get("account/get-files/", {
				"hash": tmp_hash
			}).done(function (data) {
				$('.listUploadedFiles').html(data);
			});
		}
		
		//For custom file upload. Shows the chosen files in list with option for delete file
		var $fileUpload = $('.fileUpload');
		if ($fileUpload.length) {
			var tmp_hash = $('#frmTicket').find('input[name="hash"]').val();
			
			$fileUpload.on('click', '.fileUploadInput', function(e) {
				$("#upload").find('input[name="files[]"]').click();
			}).on('click', '.btnRemoveFile', function(e) {
				$.post('account/remove-file/', {
					'filename': $(this).data('filename')
				}).done(function (data) {
					if (data.status && data.status === 'OK') {
						getAccountUploads.call(null, tmp_hash);
					}
				});
			});
			if (zinoUpload) {
				$("#upload").zinoUpload({
					method: "POST",
					multiple: true,
					url: "account/upload-files/",
					name: "files[]",
					submit: function (event, ui) {
						$(this).zinoUpload("option", "data", {
							"hash": tmp_hash
						});
					},
					complete: function (event, ui) {
						if (ui.response && ui.response.status && ui.response.status === 'OK') {
							getAccountUploads.call(null, tmp_hash);
						}
				    }
				});
			}
			
		}
		
		// SEO tool --------------------------------------
		$doc.on("submit", "#frmAnalyze", function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			var $form = $(this),
				$btn = $form.find(":button").prop("disabled", true);
			$("#seo-results").empty().addClass("loading");
			$.post("tools/seo-analyze/", $form.serialize()).done(function (data) {
				$("#seo-results").removeClass("loading").html(data).find("a:first").trigger("click");
			}).always(function (data) {
				$btn.prop("disabled", false);
			});
			return false;
		});
		// SEO tool --------------------------------------
		
		// Quote calculator ------------------------------
		(function () {
		var checkNumeric = function(value) {
			var numberRegex = /^[+-]?\d+(\.\d+)?([eE][+-]?\d+)?$/;
			if (numberRegex.test(value)) {
				return true;
			} else {
				return false;
			}
		};
		
		var getTaskSummary = function(flag) {
			var total_hour = 0,
				total_price = 0;
			$('.chk-outsourced').each(function(i, obj) {
				var index = $(this).data("index");
				if (index != "{INDEX}") {
					if (!$(this).is(':checked')) {
						var task_estimate = $("#task_estimate_" + index).val();
						if (task_estimate == "") {

						} else {
							if (checkNumeric.apply(null, [ task_estimate ]) == false) {

							} else {
								total_hour += parseFloat(task_estimate);
							}
						}
					} else {
						var task_price = $("#task_price_" + index).val();
						if (task_price == "") {

						} else {
							if (checkNumeric.apply(null, [ task_price ]) == false) {

							} else {
								total_price += parseFloat(task_price);
							}
						}
					}
				}
			});
			if (flag == 'estimate') {
				return total_hour;
			} else {
				return total_price;
			}
		};
		
		var getTotalEstimate = function() {
			return getTaskSummary.apply(null, [ "estimate" ]);
		};

		var getTotalTaskPrice = function() {
			return getTaskSummary.apply(null, [ "price" ]);
		};

		var setTimePercentage = function(test, support) {
			var total = 0;
			total = getTotalEstimate.apply();

			var discuss_hour = $("#discuss-hour").val();
			if (discuss_hour != "") {
				if (checkNumeric.apply(null, [ discuss_hour ]) == true) {
					total += parseFloat(discuss_hour);
				}
			}
			if (total > 0) {
				if (test != null) {
					var test_time = parseFloat(total * test / 100);
					$("#test-hour").val(test_time);
				}
				if (support != null) {
					var support_time = parseFloat(total * support / 100);
					$("#support-hour").val(support_time);
				}
			}
		};

		var getDevelopingTime = function() {
			var total = 0,
				discuss_hour = $("#discuss-hour").val(),
				test_hour = $("#test-hour").val(),
				support_hour = $("#support-hour").val();

			total += getTotalEstimate.apply();
			if (discuss_hour != "") {
				if (checkNumeric.apply(null, [ discuss_hour ]) == true) {
					total += parseFloat(discuss_hour);
				}
			}
			if (test_hour != "") {
				if (checkNumeric.apply(null, [ test_hour ]) == true) {
					total += parseFloat(test_hour);
				}
			}
			if (support_hour != "") {
				if (checkNumeric.apply(null, [ support_hour ]) == true) {
					total += parseFloat(support_hour);
				}
			}
			return total;
		};

		var displayErrorMessage = function() {
			var count = 0;
			$('#errorContainer').children('li').each(function() {
				var style = $(this).attr("style");
				if (style.indexOf("display: list-item;") !== -1) {
					count++;
				}
			});
			if (count > 0) {
				$('#errorContainer').show();
			} else {
				$('#errorContainer').hide();
			}
		};

		var displayCalculation = function() {
			var hourly_rate = $("#hourly-rate").val(),
				total_time = getDevelopingTime.apply(),
				total_price = getTotalTaskPrice.apply();
			//if (total_time > 1) {
				//$("#total-time").html(total_time.toFixed(2) + " hours");
			//} else {
				//$("#total-time").html(total_time.toFixed(2) + " hour");
			//}
			$("#total_time").val(total_time.toFixed(2));
			if (hourly_rate != "") {
				if (checkNumeric.apply(null, [ hourly_rate ]) == true) {
					total_price += (total_time * hourly_rate);
				}
			}
			//$("#total-price").html(total_price.toFixed(2) + " USD");
			$("#total_price").val(total_price.toFixed(2));
		};

		$doc.on("click", "a.time-percentage", function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			var percentage = parseFloat($(this).data("value"));
			if (percentage == 20) {
				setTimePercentage.apply(null, [ percentage, null ]);
			} else {
				setTimePercentage.apply(null, [ null, percentage ]);
			}
			displayCalculation.apply();
			return false;
		}).on("click", ".chk-outsourced", function (e) {
			var index = $(this).data("index");
			if ($(this).is(':checked')) {
				$("#price_container_" + index).show();
				$("#estimate_container_" + index).hide();
			} else {
				$("#price_container_" + index).hide();
				$("#estimate_container_" + index).show();
			}
			displayCalculation.apply();
		}).on("click", ".add-task", function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			var cloneContent = $("#task-clone").html();
			cloneContent = cloneContent.replace("cloneTaskTemp", "cloneTask");
			var index = parseInt($("#task_index").html());
			var i = index + 1;
			if (index === 1) {
				$("#task_container").append(cloneContent.replace(/{INDEX}/g, 2));
				$("#task_index").html(2);
			} else {
				$("div.cloneTask:last").after(cloneContent.replace(/{INDEX}/g, i));
				$("#task_index").html(i);
			}
			return false;
		}).on("click", ".remove-task", function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			$(this).closest('.cloneTask').remove();
			if (!$(".cloneTask").length) {
				$("#task_index").html(1);
			}
			var index = $(this).data("index");
			$("#forTask" + index).hide();

			displayCalculation.apply();
			return false;
		}).on("keyup", "#discuss-hour", function (e) {
			var discuss_hour = $(this).val();
			if (discuss_hour != "") {
				if (checkNumeric.apply(null, [ discuss_hour ]) == false) {
					$("#forDiscussHour").html("Discussing requirements must be a number.").css("display", "list-item");
				} else {
					$("#forDiscussHour").hide();
				}
			}
			displayErrorMessage.apply();
			displayCalculation.apply();
		}).on("change", "#discuss-hour", function (e) {
			var discuss_hour = $(this).val();
			if (discuss_hour == "") {
				$(this).val(0);
				$("#forDiscussHour").hide();
			}
			displayErrorMessage.apply();
			displayCalculation.apply();
		}).on("keyup", "input.task-hour-estimate", function (e) {
			var hour_estimate = $(this).val();
			var index = $(this).data("index");
			var message = "";
			if (hour_estimate != "") {
				if (checkNumeric.apply(null, [ hour_estimate ]) == false) {
					message += "<li class='task-validation' id='forTask"
							+ index
							+ "' style='display: list-item'>Estimation hours for task #"
							+ index + " must be a number.</li>";
				} else {
					if ($("#forTask" + index).length > 0) {
						$("#forTask" + index).remove();
					}
				}
			}
			if (message != "") {
				if ($("#forTask" + index).length == 0) {
					$("#forDiscussHour:last").after(message);
				}
			}
			displayErrorMessage.apply();
			displayCalculation.apply();
		}).on("change", "input.task-hour-estimate", function (e) {
			var hour_estimate = $(this).val();
			var index = $(this).data("index");
			var message = "";
			if (hour_estimate == "") {
				$(this).val(0);
				if ($("#forTask" + index).length > 0) {
					$("#forTask" + index).remove();
				}
			}
			displayErrorMessage.apply();
			displayCalculation.apply();
		}).on("keyup", "input.task-price-estimate", function (e) {
			var price_estimate = $(this).val();
			var index = $(this).data("index");
			var message = "";
			if (price_estimate != "") {
				if (checkNumeric
						.apply(null, [ price_estimate ]) == false) {
					message += "<li class='task-validation' id='forTask"
							+ index
							+ "' style='display: list-item'>The price for task #"
							+ index + " must be a number.</li>";
				} else {
					if ($("#forTask" + index).length > 0) {
						$("#forTask" + index).remove();
					}
				}
			}
			if (message != "") {
				if ($("#forTask" + index).length == 0) {
					$("#forDiscussHour:last").after(message);
				}
			}
			displayErrorMessage.apply();
			displayCalculation.apply();
		}).on("change", "input.task-price-estimate", function (e) {
			var price_estimate = $(this).val();
			var index = $(this).data("index");
			var message = "";
			if (price_estimate == "") {
				$(this).val(0);
				if ($("#forTask" + index).length > 0) {
					$("#forTask" + index).remove();
				}
			}
			displayErrorMessage.apply();
			displayCalculation.apply();
		}).on("keyup", "#test-hour", function (e) {
			var test_hour = $(this).val();
			if (test_hour != "") {
				if (checkNumeric.apply(null, [ test_hour ]) == false) {
					$("#forTestHour").html("Testing and bug fixing must be a number.");
					$("#forTestHour").css("display", "list-item");
				} else {
					$("#forTestHour").hide();
				}
			}
			displayErrorMessage.apply();
			displayCalculation.apply();
		}).on("change", "#test-hour", function (e) {	
			var test_hour = $(this).val();
			if (test_hour == "") {
				$(this).val(0);
				$("#forTestHour").hide();
			}
			displayErrorMessage.apply();
			displayCalculation.apply();
		}).on("keyup", "#support-hour", function (e) {
			var support_hour = $(this).val();
			if (support_hour != "") {
				if (checkNumeric.apply(null, [ support_hour ]) == false) {
					$("#forSupportHour").html("After sale support must be a number.");
					$("#forSupportHour").css("display", "list-item");
				} else {
					$("#forSupportHour").hide();
				}
			}
			displayErrorMessage.apply();
			displayCalculation.apply();
		}).on("change", "#support-hour", function (e) {
			var support_hour = $(this).val();
			if (support_hour == "") {
				$(this).val(0);
				$("#forSupportHour").hide();
			}
			displayErrorMessage.apply();
			displayCalculation.apply();
		}).on("keyup", "#hourly-rate", function (e) {
			var hourly_rate = $(this).val();
			if (hourly_rate != "") {
				if (checkNumeric.apply(null, [ hourly_rate ]) == false) {
					$("#forHourlyRate").html("Hourly rate must be a number.");
					$("#forHourlyRate").css("display", "list-item");
				} else {
					$("#forHourlyRate").hide();
				}
			}
			displayErrorMessage.apply();
			displayCalculation.apply();
		}).on("change", "#hourly-rate", function (e) {
			var hourly_rate = $(this).val();
			if (hourly_rate == "") {
				$(this).val(0);
				$("#forHourlyRate").hide();
			}
			displayErrorMessage.apply();
			displayCalculation.apply();
		}).on("change", "#client_copy", function () {
			if ($(this).is(":checked")) {
				$("#client_name").addClass("required");
				$("#client_email").addClass("required");
			} else {
				$("#client_name").removeClass("required");
				$("#client_email").removeClass("required");
			}
		}).on("click", ".btn-seo-advanced", function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			var $advanced = $( $(this).data("target") );
			if ($advanced.is(":visible")) {
				$advanced.slideUp().find("input").val("");
			} else {
				$advanced.slideDown();
			}
			return false;
		}).on("click", ".card-big-dot", function (e) {
			if (e && e.preventDefault) {
				e.preventDefault();
			}
			$(".card-big-dot").closest(".card-big-dots").find(".card-big-dot").removeClass("active");
			$(this).addClass("active");
		}).on("change", "#search_tutorial", function (e) {
			window.location.href = $(this).data("url") + "&search=" + $(this).val();
		});
		
		var $frmQuoteSend = $("#frmQuoteSend");
		if ($frmQuoteSend.length && validate) {
			$frmQuoteSend.validate({
				rules: {
					"quote_name": "required",
					"quote_email": {
						required: true,
						email: true
					},
					"client_name": "required",
					"client_email": {
						required: true,
						email: true
					},
					"project_name": "required",
					"captcha": {
						required: true,
						maxlength: 6,
						remote: "captcha-check/"
					},
					"quote_copy": { "require_from_group" : [1, ".copy-group"]},
					"client_copy": { "require_from_group" : [1, ".copy-group"]}
				},
				wrapper: 'li',
				errorLabelContainer: $frmQuoteSend.find('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false
			});
		}
		})();
		// Quote calculator --------------------------

		if ($('.sliderSwipeable, .swipeableThumbs').length) {
			sliderSwipe.call(null, '.swipeableThumbs ul, .sliderSwipeable .slides');
		};
		
		//Christmas banner
		function createCookie(name,value,days) {
			if (days) {
				var date = new Date();
				date.setTime(date.getTime()+(days*24*60*60*1000));
				var expires = "; expires="+date.toGMTString();
			}
			else var expires = "";
			document.cookie = name+"="+value+expires+"; path=/";
		}
		
		if ($('.promoBannerChristmas').length) {
			$('.pageActionsChristmasGift').removeClass('pageActionsActive pageActionsActiveImportant');
			$('.promoBannerChristmas').on('click', '.promoBannerFlipperActions .btn', function(e) {
				$(this).parents('.promoBannerFlipperWrapper').addClass('promoBannerFlipperWrapperHidden');
				$('.pageActionsChristmasGift').addClass('pageActionsActiveImportant');
				createCookie('PJ_Xmas_Closed', '1');

				e.preventDefault();
			});
		};
		
		var $christmasPopup = $('.christmasPopup');
		if ($christmasPopup.length) {
			$christmasPopup.on('click', '.christmasClose', function (e) {
				$christmasPopup.removeClass('christmasActive');
				$('.pageActionsChristmasGift.chrsitmasGift').addClass('pageActionsActiveImportant');
				createCookie('PJ_Xmas_Closed', '1');
				
				e.preventDefault();
			}).addClass('christmasActive');
		}
		
		//Our work page mooving thumbs
		if ($('.thumbsMoving').length) {
			var thumbsWrapper = '.thumbsMoving';
			var thumbsWrapperActiveClass = 'thumbsMovingActive';
			var thumbsRow = '.thumbsRow';
			var thumbsRowActiveClass = 'thumbsRowActive';
			var thumbsCol = '.thumbsCol';
			var thumbsColActiveClass = 'thumbsColActive';

			$(thumbsCol).on('mouseenter mouseleave', function(e) {
				var $currentCol = $(this);
				var $currentColIndex = $currentCol.index();
				var $currentWrapper = $currentCol.parents(thumbsWrapper);

				if (e.type === 'mouseenter') {
					$currentCol.addClass(thumbsColActiveClass);
					$currentCol.parent().addClass(thumbsRowActiveClass);
					$currentWrapper.find(thumbsCol).filter(function() {
						if ($(this).index() === $currentColIndex) {
							return $(this);
						};
					}).addClass(thumbsColActiveClass);
					$currentWrapper.addClass(thumbsWrapperActiveClass);
				} else if (e.type === 'mouseleave') {
					$currentWrapper.find(thumbsRow).removeClass(thumbsRowActiveClass);
					$currentWrapper.find(thumbsCol).removeClass(thumbsColActiveClass);
					$currentWrapper.removeClass(thumbsWrapperActiveClass);
				};
			});
		};

		if ($('.viewLargerImage').length) {
			$('.viewLargerImage').colorbox({
				maxWidth: 1148,
				rel: function() {
					return $(this).attr('data-imageGroup');
				},
				slideshow: false,
				slideshowSpeed: 3000
			});
		};

		if ($('.sliderProjectsAlt').length) {
			$('.sliderProjectsAlt .slides').carouFredSel({
				width: '100%',
				items: {
					visible: 'variable',
					width: 390,
				},
				scroll: {
					items: 1,
					pauseOnHover: true,
					duration: 1000
				},
				prev: {
					button: function(){
						return $(this).parents('.slider').find('.sliderPrev');
					}
				},
				next: {
					button: function(){
						return $(this).parents('.slider').find('.sliderNext');
					}
				}
			});
		};
		
		if ($('.formBundle').length) {
			$('.formBundle').on('click', '.btnBundleAdd', function (e) {
				if (e && e.preventDefault) {
					e.preventDefault();
				}
				var $template = $('#bundle_template');
				if ($template.length) {
					$template.find('.formRow:first').clone().appendTo('#bundle_box');
					$template.find('.formRow:last').clone().appendTo('#bundle_box');
				}
				$('#bundle_price').html('&#36;199');
				$('.btnBundleAdd').closest('.formUpdate').hide();
				$('.btnBundleRemove').closest('.formUpdate').show();
				return false;
			}).on('click', '.btnBundleRemove', function (e) {
				if (e && e.preventDefault) {
					e.preventDefault();
				}
				$('#bundle_box').empty();
				$('#bundle_price').html('&#36;99');
				$('.btnBundleRemove').closest('.formUpdate').hide();
				$('.btnBundleAdd').closest('.formUpdate').show();
				$('#product_1').trigger('change');
				return false;
			}).on('change', '#product_1, #product_2, #product_3, select[name="product_4"], select[name="product_5"]', function () {
				var $form = $('.formBundle').find('form'),
					regular = 0,
					p1 = $form.find('#product_1').find('option:selected').val(),
					p2 = $form.find('#product_2').find('option:selected').val(),
					p3 = $form.find('#product_3').find('option:selected').val(),
					p4, p5;
				
				if (p1.indexOf('|') !== -1) {
					regular += Number(p1.split('|')[2]);
				}
				if (p2.indexOf('|') !== -1) {
					regular += Number(p2.split('|')[2]);
				}
				if (p3.indexOf('|') !== -1) {
					regular += Number(p3.split('|')[2]);
				}
				if ($form.find('select').length === 5) {
					p4 = $form.find('select[name="product_4"]').find('option:selected').val();
					p5 = $form.find('select[name="product_5"]').find('option:selected').val();
					if (p4.indexOf('|') !== -1) {
						regular += Number(p4.split('|')[2]);
					}
					if (p5.indexOf('|') !== -1) {
						regular += Number(p5.split('|')[2]);
					}
				}
				
				$('#bundle_regular').html('&#36;' + regular);
			});
			
			$('.formBundle').find('form').validate({
				rules: {
					'product_1': 'required',
					'product_2': 'required',
					'product_3': 'required'
				},
				wrapper: 'li',
				errorLabelContainer: $('.formValidation ul'),
				errorClass: 'formError',
				onkeyup: false,
				ignore: ".ignore",
				submitHandler: function (form) {
					$.post('bundle/', $(form).serialize()).done(function (data) {
						if (data && data.status && data.href && data.status === 'OK') {
							$('<a>')
								.attr('href', data.href)
								.addClass('btn btnLink btnPopupTrigger')
								.appendTo('body')
								.trigger('click')
								.remove();
						}
					});
					return false;
				}
			});
		};
		
		function rateUsWatcher() {
			if ($('input[name="support"]:checked').length && $('input[name="product"]:checked').length) {
				$(this).closest('form').find(':submit').prop('disabled', false);
			}
		}
		//For Custom Checkboxes and Radios
		if ($('.customCheckbox, .customRadio').length) {
			var checkedClass = 'customInputChecked';
			var disabledClass = 'customInputDisabled';
			var inputSelector = '.customCheckbox input, .customRadio input';

			$(inputSelector).each(function() {
				var input = this;

				$(input).parent().toggleClass(checkedClass, input.checked);
			})
			.on('change', function() {
				var input = this;

				if(input.type === 'radio') {
					var name = input.name;
					$(input.ownerDocument).find('[name=' + name + ']').each(function() {
						var radioInput = this;
						$(radioInput).parent().toggleClass(checkedClass, radioInput.checked);
					});
					
					rateUsWatcher.call(this);
				} else {
					$(input).parent().toggleClass(checkedClass, input.checked);
				};
			})
			.on('disable', function() {
				var input = this;

				input.disabled = true;
				$(input).parent().addClass(disabledClass);
			})
			.on('enable', function() {
				var input = this;

				input.disabled = false;
				$(input).parent().removeClass(disabledClass);
			});
		};
		
		$(".btn-free-download").on("click", function(e) {
			var category = 'FreeDownload_' + $(this).data("acronym");
			trackEvent.call(null, category, 'click', window.location.pathname);
			return true;
		});
		
		if (window.location.pathname == "/mega-sale.php" && window.location.hash === "#contact") {
			$('.btnPopupTrigger[href$="mega-sale-contact.php"]').trigger("click");
		}
		
		//Function "doPlaceholders" include placeholders functionality if the browser doesn't supported it like IE9
		$.support.placeholder = (function() {
			return 'placeholder' in document.createElement('input');
		})();

		if (!$.support.placeholder) {
			$('input[placeholder], textarea[placeholder]').doPlaceholders();
		};
	});

	//Fixes a problem with this two navigations. The problem is: when the window is smaller and navigation is hidden show -> hide navigation after that resize to bigger screen size the navigation stays hidden
	$win.resize(function() {
		if ($('.nav').length) {
			var $nav = $('.nav');
			var $navDropdown = $('.dropdown');
			if ($win.width() > 768) {
				$nav.stop(true, true).slideDown('slow');
				
				$navDropdown.addClass('dropdownOpen');
			}/* else if ($win.width() < 769) {
				$nav.stop(true, true).slideUp('slow');
				$('.btnNavTrigger').removeClass('active');
				
				$navDropdown.removeClass('dropdownOpen');
			}*/;
		};
		
		if ($('.navSecondary').length) {
			var $navDropDown = $('.navSecondary > ul');
			if ($win.width() > 990) {
				$navDropDown.stop(true, true).slideDown('slow');
			} else if ($win.width() < 991) {
				$navDropDown.stop(true, true).slideUp('slow');
			};
		};
	});
	
	var fnDoSliderWithThumbs = function() {
		var $slides = $('.sliderWithThumbs .slides');
		var $thumbs = $('.sliderWithThumbs .sliderThumbs ul');
		var selectedClass = 'selected';

		$thumbs.empty();
		$slides.carouFredSel({
			responsive: true,
			auto: false,
			items: {
				visible: {
					min: 1,
					max: 1
				}
			},
			onCreate: function() {
				if (($(this).children('.slide').length) <= 1) {
					$(this).parents('.sliderWithThumbs').addClass('sliderWithThumbsNoThumbs');
				};

				$(this).children('.slide').each(function() {
					var $currentSlide = $(this);
					var $image = $currentSlide.find('.slideImage img');
					var $imageSrc = $image.attr('src');
					var $imageAlt = $image.attr('alt');

					$currentSlide.parents('.slider').find('.sliderThumbs ul').append(['<li><a href="#"><img src="', $imageSrc, '" alt="', $imageAlt, '" /></a></li>'].join(''));
				});

				fnDoImagePopup();
			},
			scroll: {
				duration: 1000,
				pauseOnHover: true,
				fx: 'crossfade',
				onBefore: function(slider) {
					var $closestThumbs = $(this).parents('.sliderWithThumbs').find('.sliderThumbs ul');
					var $currentImageSrc = slider.items.visible.find('img').attr('src');
					var $currentThumb = $closestThumbs.find('img[src="' + $currentImageSrc + '"]').parents('li');
					var $currentVisibleThumb = $closestThumbs.triggerHandler('currentVisible').find('img[src="' + $currentImageSrc + '"]').parents('li');

					if ($currentVisibleThumb.length) {
						$currentVisibleThumb.addClass(selectedClass).siblings().removeClass(selectedClass);
					} else {
						$closestThumbs.trigger('slideTo', $currentThumb);
						$currentThumb.addClass(selectedClass).siblings().removeClass(selectedClass);
					};
				}
			}
		});

		$thumbs.carouFredSel({
			auto: false,
			width: '100%',
			items: {
				visible: 'variable',
				width: 110,
				height: 80
			},
			onCreate: function() {
				var $closestSlides = $(this).parents('.sliderWithThumbs').find('.slides');
				var $currentImageSrc = $closestSlides.triggerHandler('currentVisible').find('img').attr('src');
				$(this).find('img[src="' + $currentImageSrc + '"]').parents('li').addClass(selectedClass).siblings().removeClass(selectedClass);
			},
			scroll: {
				items: 1,
				pauseOnHover: true,
				duration: 1000
			},
			prev: {
				button: function(){
					return $(this).parents('.sliderThumbs').find('.sliderPrev');
				}
			},
			next: {
				button: function(){
					return $(this).parents('.sliderThumbs').find('.sliderNext');
				}
			}
		});

		$thumbs.on('click', 'a', function(e) {
			var $clickedLink = $(this);
			var $currentImageSrc = $clickedLink.find('img').attr('src');
			var $destinationSlide = $clickedLink.parents('.sliderWithThumbs').find('.slides').find('img[src="' + $currentImageSrc + '"]').parents('li');

			$clickedLink.parent().addClass(selectedClass).siblings().removeClass(selectedClass);
			$slides.trigger('slideTo', $destinationSlide);

			e.preventDefault();
		});
	};
	
	var fnRemoveSliderWithThumbs = function() {
		$('.sliderWithThumbs .slides').trigger('destroy');
		$('.sliderWithThumbs .sliderThumbs ul').trigger('destroy');
	};
	
	var fnDoSliderFeatured = function($slider, $thumbs) {
		var $slides = $slider;
		var selectedClass = 'selected';
		var number = 0;
		
		$('.sectionFeaturedNav ul').each(function() {
			var $currentLinks = $(this).find('a');
			$currentLinks.each(function() {
				number++;
				$(this).attr('data-index', number);
			});
			number = 0;
		});

		$thumbs.empty();
		$slides.carouFredSel({
			responsive: true,
			auto: false,
			pauseOnHover: true,
			items: {
				visible: {
					min: 1,
					max: 1
				}
			},
			onCreate: function() {
				var $slide = $(this).children('.slide');
				if ($slide.length > 1) {
					$slide.each(function() {
						var $currentSlide = $(this);
						var $imageSrc = $currentSlide.find('.slideImage img').attr('src');
						var $currentSlideIndex = $currentSlide.attr('data-index');

						$currentSlide.parents('.slider').find('.sliderFeaturedNav .sliderFeaturedThumbs').append('<li><a href="#"><img src="' + $imageSrc + '" alt="" /></a></li>');
						
						onCreate.call(null, $currentSlide);
					});
				}

				var $closestNav = $(this).parents('.sectionFeatured').find('.sectionFeaturedNav');
				var $currentActiveSlideIndex = $(this).children('.slide').eq(0).attr('data-index');
				$closestNav.find('li > a[data-index="' + $currentActiveSlideIndex + '"]').parent().addClass(selectedClass).siblings().removeClass(selectedClass);
			},
			scroll: {
				duration: 1000,
				onBefore: function(slider) {
					var $closestThumbs = $(this).parents('.sectionFeatured').find('.sliderFeaturedNav .sliderFeaturedThumbs');
					var $currentImageSrc = slider.items.visible.find('img').attr('src');
					var $currentThumb = $closestThumbs.find('img[src="' + $currentImageSrc + '"]').parents('li');
					var $currentVisibleThumb = $closestThumbs.triggerHandler('currentVisible').find('img[src="' + $currentImageSrc + '"]').parents('li');

					if ($currentVisibleThumb.length) {
						$currentVisibleThumb.addClass(selectedClass).siblings().removeClass(selectedClass);
					} else {
						$closestThumbs.trigger('slideTo', $currentThumb);
						$currentThumb.addClass(selectedClass).siblings().removeClass(selectedClass);
					};

					var $closestNav = $(this).parents('.sectionFeatured').find('.sectionFeaturedNav');
					var $currentSlideIndex = slider.items.visible.attr('data-index');
					var $activeNavLink = $closestNav.find('a[data-index="' + $currentSlideIndex + '"]').parent();

					if ($activeNavLink.length) {
						$activeNavLink.addClass(selectedClass).siblings().removeClass(selectedClass);
					} else {
						$closestNav.find('.selected').removeClass(selectedClass)
					};
				}
			},
			onAfter: onAfter
		});

		$thumbs.carouFredSel({
			width: '100%',
			items: {
				visible: 'variable',
				width: 74,
				height: 56
			},
			onCreate: function() {
				var $closestSlides = $(this).parents('.sectionFeatured').find('.slides');
				var $currentImageSrc = $closestSlides.triggerHandler('currentVisible').find('img').attr('src');
				$(this).find('img[src="' + $currentImageSrc + '"]').parents('li').addClass(selectedClass).siblings().removeClass(selectedClass);
			},
			scroll: {
				items: 1,
				pauseOnHover: true,
				duration: 1000
			},
			prev: {
				button: function(){
					return $(this).parents('.slider').find('.sliderPrev');
				}
			},
			next: {
				button: function(){
					return $(this).parents('.slider').find('.sliderNext');
				}
			}
		});

		$thumbs.on('click', 'a', function(e) {
			var $clickedImageSrc = $(this).children().attr('src');
			var $closestSlides = $(this).parents('.sectionFeatured').find('.slides');
			var $destinationSlide = $closestSlides.find('img[src="' + $clickedImageSrc + '"]').parents('li');
			$closestSlides.trigger('slideTo', $destinationSlide);

			e.preventDefault();
		});

		$('.sectionFeaturedNav ul li > a').on('click', function(e) {
			var $clickedLink = $(this);
			var $clickedLinkIndex = $clickedLink.data('index');
			var $closestSlides = $(this).parents('.sectionFeatured').find('.slides');
			var $destinationSlide = $clickedLink.parents('.sectionFeatured').find('.sliderFeatured .slide[data-index="' + $clickedLinkIndex + '"]');

			$closestSlides.trigger('slideTo', $destinationSlide);
			$clickedLink.parent().addClass(selectedClass).siblings().removeClass(selectedClass);

			e.preventDefault();
		});
	};

	var fnRemoveSliderFeatured = function($slider, $thumbs) {
		$slider.trigger('destroy');
		$thumbs.trigger('destroy');
	};

	var fnDoInlinePopup = function() {
		[].forEach.call(document.querySelectorAll(".btnInlinePopupTrigger"), function (el) {
			$(el).colorbox({
				scrolling: false,
				closeButton: false,
				inline: true, 
				href: el.getAttribute("href") || el.getAttribute("data-href"),
				onComplete: function (opts) {
					var $this = $(this),
						$popup = $('.popup');
					
					$popup.on('click', '.btnPopupClose', function(e) {
						e.preventDefault();
						$.colorbox.close();
					});
				}
			});
		});
	};
	
	var fnDoImagePopup = function() {
		$('.btnImagePopupTrigger').colorbox({
			maxWidth: '96%',
			rel: function() {
				return $(this).attr('data-imageGroup');
			},
			slideshow: false,
			slideshowSpeed: 3000,
			title: function() {
				var $clickedLink = $(this);
				var $currentIndex = $clickedLink.parents('.slide').data('index');
				var $currentTitle = $(this).parents('.sectionFeatured').find('.sectionFeaturedNav a[data-index="' + $currentIndex + '"]');
				var $popupTitle = $(this).parents('.sectionFeatured');

				if ($currentTitle.length) {
					return '<span>' + $currentTitle.text() + '</span>';
				};

			},
			onOpen: function() {
				if ($(this).parents('.sliderWithThumbs').length) {
					fnRemoveSliderWithThumbs();
				} else if ($(this).parents('.sliderFeatured').length) {
					var $slider = $(this).parents('.sliderFeatured').find('.slides');
					var $thumbs = $(this).parents('.sliderFeatured').find('.sliderFeaturedNav .sliderFeaturedThumbs');
					fnRemoveSliderFeatured($slider, $thumbs);
				};
			},
			onClosed: function() {
				if ($(this).parents('.sliderWithThumbs').length) {
					fnDoSliderWithThumbs();
				} else if ($(this).parents('.sliderFeatured').length) {
					var $slider = $(this).parents('.sliderFeatured').find('.slides');
					var $thumbs = $(this).parents('.sliderFeatured').find('.sliderFeaturedNav .sliderFeaturedThumbs');
					fnDoSliderFeatured($slider, $thumbs);
				};
			}
		});
	};

	var fnDoViewOnScroll = function(element) {
		var $winTop = $win.scrollTop();
		var $winBottom = $winTop + $win.height();
		var elementOffset = 0;
		if (element.data('offset') != undefined) {
			elementOffset = element.data('offset');
		};

		var elementTop = $(element).offset().top;
		var elementBottom = elementTop + 30;
		if (elementOffset != 0) {
			if (winTop - elementTop >= 0) {
				elementTop = $(element).offset().top + elementOffset;
			} else {
				elementBottom = elementTop + $(element).height() - elementOffset;
			};
		};

		if ((elementBottom <= $winBottom) && (elementTop >= $winTop)) {
			$(element).removeClass('notViewed').addClass('viewed');
		};
	};
	
	$.fn.doPlaceholders = function() {
		if ($.support.placeholder) {
			return this;
		};

		var $fields = this.filter(function () {
			return !$(this).data('didPlaceholders');
		});

		$fields.on('focus blur', function(event) {
			var placeholder = this.getAttribute('placeholder');

			if (event.type === 'focus' && placeholder === this.value) {
				this.value = '';
			} else if (event.type === 'blur' && this.value === '') {
				this.value = placeholder;
			};
		});

		$fields.each(function() {
			if (this.value === '') {
				this.value = this.getAttribute('placeholder');
			};
		});

		$fields.data('didPlaceholders', true);

		return $fields;
	};

	var ScrollSpy = function(options) {
		var _spy = this;

		_spy.linksContainerSelector = options.linksContainerSelector;
		_spy.sectionSelector = options.sectionSelector;

		_spy.$linksContainer = $(_spy.linksContainerSelector);
		_spy.$links = _spy.$linksContainer.find('a');
		_spy.$sections = $(_spy.sectionSelector);
		_spy.headerOffset = options.headerOffset;

		_spy.currentIdx = 0;
		_spy.data = {
			offsets: [],
			ids: []
		};
	};

	ScrollSpy.prototype.getPositions = function() {
		var _spy = this;
		var data = _spy.data;

		for(var i = 0; i < _spy.$sections.length; i++) {
			var $section = _spy.$sections.eq(i);

			data.ids.push($section.attr('id'));
			data.offsets.push($section.offset().top);
		}
	};

	ScrollSpy.prototype.refreshPositions = function() {
		var _spy = this;
		var data = _spy.data.offsets;

		for(var i = 0; i < _spy.$sections.length; i++) {
			var $section = _spy.$sections.eq(i);

			data[i] = $section.offset().top;
		}
	};

	ScrollSpy.prototype.getCurrentSection = function() {
		var _spy = this;
		var data = _spy.data;
		var scrollTop = $(window).scrollTop();

		if(_spy.headerOffset === true) {
			scrollTop += _spy.$linksContainer.outerHeight();
		}

		for(var i = 0; i < data.offsets.length; i++) {
			var currentOffset = data.offsets[i];
			var nextOffset = data.offsets[i+1];

			if(scrollTop >= currentOffset && scrollTop < nextOffset || 
				scrollTop >= currentOffset && typeof nextOffset === 'undefined') {
				_spy.currentIdx = i;
				break;
			}
		}

		_spy.setCurrent();
	};

	ScrollSpy.prototype.setCurrent = function() {
		var _spy = this;

		_spy.$links.eq(_spy.currentIdx)
		.parent()
		.addClass('current')
		.siblings('.current')
		.removeClass('current');
	};

	ScrollSpy.prototype.scrollToCurrentSection = function() {
		var _spy = this;

		var newTop = _spy.data.offsets[_spy.currentIdx];

		if(_spy.headerOffset === true) {
			newTop -= _spy.$linksContainer.outerHeight();
		}

		$('html, body').animate({
			scrollTop: newTop
		}, {
			duration: 700,
			queue: false
		});
	};

	ScrollSpy.prototype.bindEvents = function() {
		var _spy = this;
		var $win = $(window);

		$win.on('scroll.scrollSpy', function() {
			_spy.getCurrentSection();
		});
	};

	ScrollSpy.prototype.init = function() {
		var _spy = this;

		_spy.getPositions();
		_spy.getCurrentSection();
		_spy.setCurrent();
		_spy.bindEvents();
	};
	
	function log() {
		if (window.console && window.console.log) {
			for (var x in arguments) {
				if (arguments.hasOwnProperty(x)) {
					window.console.log(arguments[x]);
				}
			}
		}
	}
	function installServiceWorker() {
		if (!('serviceWorker' in navigator)) return void log('Service Worker not supported - aborting');
		if (!/\.com$/.test(window.location.hostname)) return;
	    var c = null;
	    navigator.serviceWorker.onmessage = function(e) {
	        if ('undefined' != typeof e.data.version)
	            if (null == c) c = e.data.version;
	            else {
	                var f = e.data.version,
	                    g = c.split('.'),
	                    l = f.split('.');
	                g[0] === l[0] ? log('Service Worker moved from ' + c + ' to ' + f) : log('Site updated. Refresh to get the latest!')
	            }
	    }, navigator.serviceWorker.ready.then(function(e) {
	    	log('service worker is ready');
	    }), navigator.serviceWorker.register('/sw.js').then(function(e) {
	        e.active && e.active.postMessage('version'), e.onupdatefound = function() {
	            log('A new version has been found... Installing...'), e.installing.onstatechange = function() {
	                return 'installed' === this.state ? log('App updated') : void('activated' === this.state && e.active.postMessage('version'), log('Incoming SW state: ' + this.state))
	            }
	        }
	    })
	}
	installServiceWorker();
})(jQuery, window, document);
